<?php
/**
 * PesquisaCurriculoFormacao
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PesquisaCurriculoFormacao Class Doc Comment
 *
 * @category    Class
 * @description Parametros de pesquisa para formacoes
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PesquisaCurriculoFormacao implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PesquisaCurriculoFormacao';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'escolaridade' => 'string',
        'curso' => 'string',
        'instituicao' => 'string',
        'ano_conclusao' => 'int',
        'periodo' => 'int',
        'situacao_curso' => 'string',
        'cidade' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'escolaridade' => null,
        'curso' => null,
        'instituicao' => null,
        'ano_conclusao' => 'int32',
        'periodo' => 'int32',
        'situacao_curso' => null,
        'cidade' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'escolaridade' => 'Escolaridade',
        'curso' => 'Curso',
        'instituicao' => 'Instituicao',
        'ano_conclusao' => 'AnoConclusao',
        'periodo' => 'Periodo',
        'situacao_curso' => 'SituacaoCurso',
        'cidade' => 'Cidade'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'escolaridade' => 'setEscolaridade',
        'curso' => 'setCurso',
        'instituicao' => 'setInstituicao',
        'ano_conclusao' => 'setAnoConclusao',
        'periodo' => 'setPeriodo',
        'situacao_curso' => 'setSituacaoCurso',
        'cidade' => 'setCidade'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'escolaridade' => 'getEscolaridade',
        'curso' => 'getCurso',
        'instituicao' => 'getInstituicao',
        'ano_conclusao' => 'getAnoConclusao',
        'periodo' => 'getPeriodo',
        'situacao_curso' => 'getSituacaoCurso',
        'cidade' => 'getCidade'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SITUACAO_CURSO_CANCELADO = 'Cancelado';
    const SITUACAO_CURSO_CURSANDO = 'Cursando';
    const SITUACAO_CURSO_TRANCADO = 'Trancado';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSituacaoCursoAllowableValues()
    {
        return [
            self::SITUACAO_CURSO_CANCELADO,
            self::SITUACAO_CURSO_CURSANDO,
            self::SITUACAO_CURSO_TRANCADO,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['escolaridade'] = isset($data['escolaridade']) ? $data['escolaridade'] : null;
        $this->container['curso'] = isset($data['curso']) ? $data['curso'] : null;
        $this->container['instituicao'] = isset($data['instituicao']) ? $data['instituicao'] : null;
        $this->container['ano_conclusao'] = isset($data['ano_conclusao']) ? $data['ano_conclusao'] : null;
        $this->container['periodo'] = isset($data['periodo']) ? $data['periodo'] : null;
        $this->container['situacao_curso'] = isset($data['situacao_curso']) ? $data['situacao_curso'] : null;
        $this->container['cidade'] = isset($data['cidade']) ? $data['cidade'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getSituacaoCursoAllowableValues();
        if (!in_array($this->container['situacao_curso'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'situacao_curso', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getSituacaoCursoAllowableValues();
        if (!in_array($this->container['situacao_curso'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets escolaridade
     * @return string
     */
    public function getEscolaridade()
    {
        return $this->container['escolaridade'];
    }

    /**
     * Sets escolaridade
     * @param string $escolaridade Nível do curso. Um dos valores presentes na Tabela Escolaridades.
     * @return $this
     */
    public function setEscolaridade($escolaridade)
    {
        $this->container['escolaridade'] = $escolaridade;

        return $this;
    }

    /**
     * Gets curso
     * @return string
     */
    public function getCurso()
    {
        return $this->container['curso'];
    }

    /**
     * Sets curso
     * @param string $curso Nome do curso procurado
     * @return $this
     */
    public function setCurso($curso)
    {
        $this->container['curso'] = $curso;

        return $this;
    }

    /**
     * Gets instituicao
     * @return string
     */
    public function getInstituicao()
    {
        return $this->container['instituicao'];
    }

    /**
     * Sets instituicao
     * @param string $instituicao Instituição de ensino
     * @return $this
     */
    public function setInstituicao($instituicao)
    {
        $this->container['instituicao'] = $instituicao;

        return $this;
    }

    /**
     * Gets ano_conclusao
     * @return int
     */
    public function getAnoConclusao()
    {
        return $this->container['ano_conclusao'];
    }

    /**
     * Sets ano_conclusao
     * @param int $ano_conclusao Ano de conclusao do curso
     * @return $this
     */
    public function setAnoConclusao($ano_conclusao)
    {
        $this->container['ano_conclusao'] = $ano_conclusao;

        return $this;
    }

    /**
     * Gets periodo
     * @return int
     */
    public function getPeriodo()
    {
        return $this->container['periodo'];
    }

    /**
     * Sets periodo
     * @param int $periodo Período do curso
     * @return $this
     */
    public function setPeriodo($periodo)
    {
        $this->container['periodo'] = $periodo;

        return $this;
    }

    /**
     * Gets situacao_curso
     * @return string
     */
    public function getSituacaoCurso()
    {
        return $this->container['situacao_curso'];
    }

    /**
     * Sets situacao_curso
     * @param string $situacao_curso Situação do curso de nível Médio Incompleto, Técnico/Pós-Médio Incompleto, Tecnólogo Incompleto ou Superior Incompleto
     * @return $this
     */
    public function setSituacaoCurso($situacao_curso)
    {
        $allowed_values = $this->getSituacaoCursoAllowableValues();
        if (!is_null($situacao_curso) && !in_array($situacao_curso, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'situacao_curso', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['situacao_curso'] = $situacao_curso;

        return $this;
    }

    /**
     * Gets cidade
     * @return string
     */
    public function getCidade()
    {
        return $this->container['cidade'];
    }

    /**
     * Sets cidade
     * @param string $cidade Cidade do curso
     * @return $this
     */
    public function setCidade($cidade)
    {
        $this->container['cidade'] = $cidade;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


