<?php
/**
 * Curriculo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Curriculo Class Doc Comment
 *
 * @category    Class
 * @description Classe com as informações para o cadastro de currículo
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Curriculo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'curriculo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mini_curriculo' => '\Swagger\Client\Model\InlineResponse200MiniCurriculo',
        'dados_pessoais' => '\Swagger\Client\Model\InlineResponse200DadosPessoais',
        'formacao' => '\Swagger\Client\Model\InlineResponse200Formacao',
        'experiencias' => '\Swagger\Client\Model\InlineResponse200Experiencias[]',
        'dados_complementares' => '\Swagger\Client\Model\InlineResponse200DadosComplementares'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mini_curriculo' => null,
        'dados_pessoais' => null,
        'formacao' => null,
        'experiencias' => null,
        'dados_complementares' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'mini_curriculo' => 'MiniCurriculo',
        'dados_pessoais' => 'DadosPessoais',
        'formacao' => 'Formacao',
        'experiencias' => 'Experiencias',
        'dados_complementares' => 'DadosComplementares'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'mini_curriculo' => 'setMiniCurriculo',
        'dados_pessoais' => 'setDadosPessoais',
        'formacao' => 'setFormacao',
        'experiencias' => 'setExperiencias',
        'dados_complementares' => 'setDadosComplementares'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'mini_curriculo' => 'getMiniCurriculo',
        'dados_pessoais' => 'getDadosPessoais',
        'formacao' => 'getFormacao',
        'experiencias' => 'getExperiencias',
        'dados_complementares' => 'getDadosComplementares'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mini_curriculo'] = isset($data['mini_curriculo']) ? $data['mini_curriculo'] : null;
        $this->container['dados_pessoais'] = isset($data['dados_pessoais']) ? $data['dados_pessoais'] : null;
        $this->container['formacao'] = isset($data['formacao']) ? $data['formacao'] : null;
        $this->container['experiencias'] = isset($data['experiencias']) ? $data['experiencias'] : null;
        $this->container['dados_complementares'] = isset($data['dados_complementares']) ? $data['dados_complementares'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets mini_curriculo
     * @return \Swagger\Client\Model\InlineResponse200MiniCurriculo
     */
    public function getMiniCurriculo()
    {
        return $this->container['mini_curriculo'];
    }

    /**
     * Sets mini_curriculo
     * @param \Swagger\Client\Model\InlineResponse200MiniCurriculo $mini_curriculo
     * @return $this
     */
    public function setMiniCurriculo($mini_curriculo)
    {
        $this->container['mini_curriculo'] = $mini_curriculo;

        return $this;
    }

    /**
     * Gets dados_pessoais
     * @return \Swagger\Client\Model\InlineResponse200DadosPessoais
     */
    public function getDadosPessoais()
    {
        return $this->container['dados_pessoais'];
    }

    /**
     * Sets dados_pessoais
     * @param \Swagger\Client\Model\InlineResponse200DadosPessoais $dados_pessoais
     * @return $this
     */
    public function setDadosPessoais($dados_pessoais)
    {
        $this->container['dados_pessoais'] = $dados_pessoais;

        return $this;
    }

    /**
     * Gets formacao
     * @return \Swagger\Client\Model\InlineResponse200Formacao
     */
    public function getFormacao()
    {
        return $this->container['formacao'];
    }

    /**
     * Sets formacao
     * @param \Swagger\Client\Model\InlineResponse200Formacao $formacao
     * @return $this
     */
    public function setFormacao($formacao)
    {
        $this->container['formacao'] = $formacao;

        return $this;
    }

    /**
     * Gets experiencias
     * @return \Swagger\Client\Model\InlineResponse200Experiencias[]
     */
    public function getExperiencias()
    {
        return $this->container['experiencias'];
    }

    /**
     * Sets experiencias
     * @param \Swagger\Client\Model\InlineResponse200Experiencias[] $experiencias Lista com as experiências profissionais do candidato.   Somente as 10 primeiras esperiências serão salvas.   A order das experiências deve ser indicada em ordem crescente de importancia (a de maior importância por primeiro).
     * @return $this
     */
    public function setExperiencias($experiencias)
    {
        $this->container['experiencias'] = $experiencias;

        return $this;
    }

    /**
     * Gets dados_complementares
     * @return \Swagger\Client\Model\InlineResponse200DadosComplementares
     */
    public function getDadosComplementares()
    {
        return $this->container['dados_complementares'];
    }

    /**
     * Sets dados_complementares
     * @param \Swagger\Client\Model\InlineResponse200DadosComplementares $dados_complementares
     * @return $this
     */
    public function setDadosComplementares($dados_complementares)
    {
        $this->container['dados_complementares'] = $dados_complementares;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


