<?php
/**
 * InlineResponse200FormacaoCursosFormacao
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InlineResponse200FormacaoCursosFormacao Class Doc Comment
 *
 * @category    Class
 * @description Informações sobre o curso de formação do candidato
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200FormacaoCursosFormacao implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_Formacao_CursosFormacao';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nivel_formacao' => 'string',
        'instituicao' => 'string',
        'nome_curso' => 'string',
        'cidade' => 'string',
        'ano_de_conclusao' => 'int',
        'situacao' => 'string',
        'periodo' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nivel_formacao' => null,
        'instituicao' => null,
        'nome_curso' => null,
        'cidade' => null,
        'ano_de_conclusao' => 'int32',
        'situacao' => null,
        'periodo' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'nivel_formacao' => 'NivelFormacao',
        'instituicao' => 'Instituicao',
        'nome_curso' => 'NomeCurso',
        'cidade' => 'Cidade',
        'ano_de_conclusao' => 'AnoDeConclusao',
        'situacao' => 'Situacao',
        'periodo' => 'Periodo'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'nivel_formacao' => 'setNivelFormacao',
        'instituicao' => 'setInstituicao',
        'nome_curso' => 'setNomeCurso',
        'cidade' => 'setCidade',
        'ano_de_conclusao' => 'setAnoDeConclusao',
        'situacao' => 'setSituacao',
        'periodo' => 'setPeriodo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'nivel_formacao' => 'getNivelFormacao',
        'instituicao' => 'getInstituicao',
        'nome_curso' => 'getNomeCurso',
        'cidade' => 'getCidade',
        'ano_de_conclusao' => 'getAnoDeConclusao',
        'situacao' => 'getSituacao',
        'periodo' => 'getPeriodo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SITUACAO_CANCELADO = 'Cancelado';
    const SITUACAO_CURSANDO = 'Cursando';
    const SITUACAO_TRANCADO = 'Trancado';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSituacaoAllowableValues()
    {
        return [
            self::SITUACAO_CANCELADO,
            self::SITUACAO_CURSANDO,
            self::SITUACAO_TRANCADO,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nivel_formacao'] = isset($data['nivel_formacao']) ? $data['nivel_formacao'] : null;
        $this->container['instituicao'] = isset($data['instituicao']) ? $data['instituicao'] : null;
        $this->container['nome_curso'] = isset($data['nome_curso']) ? $data['nome_curso'] : null;
        $this->container['cidade'] = isset($data['cidade']) ? $data['cidade'] : null;
        $this->container['ano_de_conclusao'] = isset($data['ano_de_conclusao']) ? $data['ano_de_conclusao'] : null;
        $this->container['situacao'] = isset($data['situacao']) ? $data['situacao'] : null;
        $this->container['periodo'] = isset($data['periodo']) ? $data['periodo'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['nivel_formacao'] === null) {
            $invalid_properties[] = "'nivel_formacao' can't be null";
        }
        $allowed_values = $this->getSituacaoAllowableValues();
        if (!in_array($this->container['situacao'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'situacao', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['nivel_formacao'] === null) {
            return false;
        }
        $allowed_values = $this->getSituacaoAllowableValues();
        if (!in_array($this->container['situacao'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets nivel_formacao
     * @return string
     */
    public function getNivelFormacao()
    {
        return $this->container['nivel_formacao'];
    }

    /**
     * Sets nivel_formacao
     * @param string $nivel_formacao Nível atual da formação   Um dos valores presentes na tabela Escolaridades.
     * @return $this
     */
    public function setNivelFormacao($nivel_formacao)
    {
        $this->container['nivel_formacao'] = $nivel_formacao;

        return $this;
    }

    /**
     * Gets instituicao
     * @return string
     */
    public function getInstituicao()
    {
        return $this->container['instituicao'];
    }

    /**
     * Sets instituicao
     * @param string $instituicao Nome da instituição onde está cursando ou foi cursado  Obrigatório quando o NivelFormacao igual a   \"Técnico/Pós-Médio Incompleto\",  \"Técnico/Pós-Médio Completo\",  \"Tecnólogo Incompleto\",  \"Superior Incompleto\",  \"Tecnólogo Completo\",  \"Superior Completo\",  \"Pós Graduação / Especialização\",  \"Mestrado\",  \"Doutorado\"
     * @return $this
     */
    public function setInstituicao($instituicao)
    {
        $this->container['instituicao'] = $instituicao;

        return $this;
    }

    /**
     * Gets nome_curso
     * @return string
     */
    public function getNomeCurso()
    {
        return $this->container['nome_curso'];
    }

    /**
     * Sets nome_curso
     * @param string $nome_curso Nome do curso  Recomenda-se o envio de um dos valores presentes na tabela Cursos.  Obrigatório quando o NivelFormacao igual a   \"Técnico/Pós-Médio Incompleto\",  \"Técnico/Pós-Médio Completo\",  \"Tecnólogo Incompleto\",  \"Superior Incompleto\",  \"Tecnólogo Completo\",  \"Superior Completo\",  \"Pós Graduação / Especialização\",  \"Mestrado\",  \"Doutorado\"
     * @return $this
     */
    public function setNomeCurso($nome_curso)
    {
        $this->container['nome_curso'] = $nome_curso;

        return $this;
    }

    /**
     * Gets cidade
     * @return string
     */
    public function getCidade()
    {
        return $this->container['cidade'];
    }

    /**
     * Sets cidade
     * @param string $cidade Nome da cidade onde foi cursado  Formato: \"NomeCidade/SiglaEstado\" (Ex.: São Paulo/SP)  Obrigatório quando o NivelFormacao igual a   \"Técnico/Pós-Médio Incompleto\",  \"Técnico/Pós-Médio Completo\",  \"Tecnólogo Incompleto\",  \"Superior Incompleto\",  \"Tecnólogo Completo\",  \"Superior Completo\",  \"Pós Graduação / Especialização\",  \"Mestrado\",  \"Doutorado\"
     * @return $this
     */
    public function setCidade($cidade)
    {
        $this->container['cidade'] = $cidade;

        return $this;
    }

    /**
     * Gets ano_de_conclusao
     * @return int
     */
    public function getAnoDeConclusao()
    {
        return $this->container['ano_de_conclusao'];
    }

    /**
     * Sets ano_de_conclusao
     * @param int $ano_de_conclusao Ano de conclusão do curso.  Obrigatório quando o NivelFormacao igual a   \"Ensino Médio Completo\",  \"Técnico/Pós-Médio Completo\",  \"Tecnólogo Completo\",  \"Superior Completo\",  \"Pós Graduação / Especialização\",  \"Mestrado\",  \"Doutorado\"
     * @return $this
     */
    public function setAnoDeConclusao($ano_de_conclusao)
    {
        $this->container['ano_de_conclusao'] = $ano_de_conclusao;

        return $this;
    }

    /**
     * Gets situacao
     * @return string
     */
    public function getSituacao()
    {
        return $this->container['situacao'];
    }

    /**
     * Sets situacao
     * @param string $situacao Atual situação do curso.  Obrigatório quando o NivelFormacao é igual a   \"Ensino Médio Incompleto\",  \"Técnico/Pós-Médio Incompleto\",  \"Tecnólogo Incompleto\",  \"Superior Incompleto\"
     * @return $this
     */
    public function setSituacao($situacao)
    {
        $allowed_values = $this->getSituacaoAllowableValues();
        if (!is_null($situacao) && !in_array($situacao, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'situacao', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['situacao'] = $situacao;

        return $this;
    }

    /**
     * Gets periodo
     * @return int
     */
    public function getPeriodo()
    {
        return $this->container['periodo'];
    }

    /**
     * Sets periodo
     * @param int $periodo Período atual do curso.  Obrigatório quando o NivelFormacao é igual a   \"Tecnólogo Incompleto\",  \"Superior Incompleto\"
     * @return $this
     */
    public function setPeriodo($periodo)
    {
        $this->container['periodo'] = $periodo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


