<?php
/**
 * FormacaoCurriculo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FormacaoCurriculo Class Doc Comment
 *
 * @category    Class
 * @description Classe com as informações de formação
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FormacaoCurriculo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FormacaoCurriculo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'idiomas' => '\Swagger\Client\Model\InlineResponse200FormacaoIdiomas[]',
        'cursos_formacao' => '\Swagger\Client\Model\InlineResponse200FormacaoCursosFormacao[]',
        'cursos_complementares' => '\Swagger\Client\Model\InlineResponse200FormacaoCursosComplementares[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'idiomas' => null,
        'cursos_formacao' => null,
        'cursos_complementares' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'idiomas' => 'Idiomas',
        'cursos_formacao' => 'CursosFormacao',
        'cursos_complementares' => 'CursosComplementares'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'idiomas' => 'setIdiomas',
        'cursos_formacao' => 'setCursosFormacao',
        'cursos_complementares' => 'setCursosComplementares'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'idiomas' => 'getIdiomas',
        'cursos_formacao' => 'getCursosFormacao',
        'cursos_complementares' => 'getCursosComplementares'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['idiomas'] = isset($data['idiomas']) ? $data['idiomas'] : null;
        $this->container['cursos_formacao'] = isset($data['cursos_formacao']) ? $data['cursos_formacao'] : null;
        $this->container['cursos_complementares'] = isset($data['cursos_complementares']) ? $data['cursos_complementares'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets idiomas
     * @return \Swagger\Client\Model\InlineResponse200FormacaoIdiomas[]
     */
    public function getIdiomas()
    {
        return $this->container['idiomas'];
    }

    /**
     * Sets idiomas
     * @param \Swagger\Client\Model\InlineResponse200FormacaoIdiomas[] $idiomas
     * @return $this
     */
    public function setIdiomas($idiomas)
    {
        $this->container['idiomas'] = $idiomas;

        return $this;
    }

    /**
     * Gets cursos_formacao
     * @return \Swagger\Client\Model\InlineResponse200FormacaoCursosFormacao[]
     */
    public function getCursosFormacao()
    {
        return $this->container['cursos_formacao'];
    }

    /**
     * Sets cursos_formacao
     * @param \Swagger\Client\Model\InlineResponse200FormacaoCursosFormacao[] $cursos_formacao Lista com os cursos de formação do candidato.  Nesta lista deve conter os cursos de Ensino Médio, incluindo técnicos,  Graduções e Especializações
     * @return $this
     */
    public function setCursosFormacao($cursos_formacao)
    {
        $this->container['cursos_formacao'] = $cursos_formacao;

        return $this;
    }

    /**
     * Gets cursos_complementares
     * @return \Swagger\Client\Model\InlineResponse200FormacaoCursosComplementares[]
     */
    public function getCursosComplementares()
    {
        return $this->container['cursos_complementares'];
    }

    /**
     * Sets cursos_complementares
     * @param \Swagger\Client\Model\InlineResponse200FormacaoCursosComplementares[] $cursos_complementares Lista com os cursos complementares
     * @return $this
     */
    public function setCursosComplementares($cursos_complementares)
    {
        $this->container['cursos_complementares'] = $cursos_complementares;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


