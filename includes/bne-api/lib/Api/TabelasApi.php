<?php
/**
 * TabelasApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * TabelasApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TabelasApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return TabelasApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation tabelasAreas
     *
     * Lista de áreas
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasAreas()
    {
        list($response) = $this->tabelasAreasWithHttpInfo();
        return $response;
    }

    /**
     * Operation tabelasAreasWithHttpInfo
     *
     * Lista de áreas
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasAreasWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/Areas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/Areas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasCategoriasHabilitacao
     *
     * Lista de Categorias de Habilitação
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasCategoriasHabilitacao()
    {
        list($response) = $this->tabelasCategoriasHabilitacaoWithHttpInfo();
        return $response;
    }

    /**
     * Operation tabelasCategoriasHabilitacaoWithHttpInfo
     *
     * Lista de Categorias de Habilitação
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasCategoriasHabilitacaoWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/CategoriasHabilitacao";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/CategoriasHabilitacao'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasCidadesBynomeParcialnumeroRegistros
     *
     * Lista de Cidades
     *
     * @param string $nome_parcial Nome parcial para pesquisa de cidades no BNE. (required)
     * @param int $numero_registros Número de registros a ser retornado. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasCidadesBynomeParcialnumeroRegistros($nome_parcial, $numero_registros = null)
    {
        list($response) = $this->tabelasCidadesBynomeParcialnumeroRegistrosWithHttpInfo($nome_parcial, $numero_registros);
        return $response;
    }

    /**
     * Operation tabelasCidadesBynomeParcialnumeroRegistrosWithHttpInfo
     *
     * Lista de Cidades
     *
     * @param string $nome_parcial Nome parcial para pesquisa de cidades no BNE. (required)
     * @param int $numero_registros Número de registros a ser retornado. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasCidadesBynomeParcialnumeroRegistrosWithHttpInfo($nome_parcial, $numero_registros = null)
    {
        // verify the required parameter 'nome_parcial' is set
        if ($nome_parcial === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nome_parcial when calling tabelasCidadesBynomeParcialnumeroRegistros');
        }
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/Cidades";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($nome_parcial !== null) {
            $queryParams['nomeParcial'] = $this->apiClient->getSerializer()->toQueryValue($nome_parcial);
        }
        // query params
        if ($numero_registros !== null) {
            $queryParams['numeroRegistros'] = $this->apiClient->getSerializer()->toQueryValue($numero_registros);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/Cidades'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasCursosBynomeParcialnumeroRegistros
     *
     * Lista de cursos.
     *
     * @param string $nome_parcial Nome parcial para pesquisa dos cursos do BNE. (required)
     * @param int $numero_registros Número de registros a ser retornado. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasCursosBynomeParcialnumeroRegistros($nome_parcial, $numero_registros = null)
    {
        list($response) = $this->tabelasCursosBynomeParcialnumeroRegistrosWithHttpInfo($nome_parcial, $numero_registros);
        return $response;
    }

    /**
     * Operation tabelasCursosBynomeParcialnumeroRegistrosWithHttpInfo
     *
     * Lista de cursos.
     *
     * @param string $nome_parcial Nome parcial para pesquisa dos cursos do BNE. (required)
     * @param int $numero_registros Número de registros a ser retornado. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasCursosBynomeParcialnumeroRegistrosWithHttpInfo($nome_parcial, $numero_registros = null)
    {
        // verify the required parameter 'nome_parcial' is set
        if ($nome_parcial === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nome_parcial when calling tabelasCursosBynomeParcialnumeroRegistros');
        }
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/Cursos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($nome_parcial !== null) {
            $queryParams['nomeParcial'] = $this->apiClient->getSerializer()->toQueryValue($nome_parcial);
        }
        // query params
        if ($numero_registros !== null) {
            $queryParams['numeroRegistros'] = $this->apiClient->getSerializer()->toQueryValue($numero_registros);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/Cursos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasDeficiencias
     *
     * Lista de Deficiências
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasDeficiencias()
    {
        list($response) = $this->tabelasDeficienciasWithHttpInfo();
        return $response;
    }

    /**
     * Operation tabelasDeficienciasWithHttpInfo
     *
     * Lista de Deficiências
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasDeficienciasWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/Deficiencias";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/Deficiencias'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasEscolaridades
     *
     * Lista de Escolaridades
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasEscolaridades()
    {
        list($response) = $this->tabelasEscolaridadesWithHttpInfo();
        return $response;
    }

    /**
     * Operation tabelasEscolaridadesWithHttpInfo
     *
     * Lista de Escolaridades
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasEscolaridadesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/Escolaridades";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/Escolaridades'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasEstadosCivis
     *
     * Lista de Estados Civis
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasEstadosCivis()
    {
        list($response) = $this->tabelasEstadosCivisWithHttpInfo();
        return $response;
    }

    /**
     * Operation tabelasEstadosCivisWithHttpInfo
     *
     * Lista de Estados Civis
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasEstadosCivisWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/EstadosCivis";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/EstadosCivis'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasFuncoesBynomeParcialnumeroRegistros
     *
     * Lista de funções.
     *
     * @param string $nome_parcial Nome parcial para pesquisa das funções do BNE. (required)
     * @param int $numero_registros Número de registros a ser retornado. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasFuncoesBynomeParcialnumeroRegistros($nome_parcial, $numero_registros = null)
    {
        list($response) = $this->tabelasFuncoesBynomeParcialnumeroRegistrosWithHttpInfo($nome_parcial, $numero_registros);
        return $response;
    }

    /**
     * Operation tabelasFuncoesBynomeParcialnumeroRegistrosWithHttpInfo
     *
     * Lista de funções.
     *
     * @param string $nome_parcial Nome parcial para pesquisa das funções do BNE. (required)
     * @param int $numero_registros Número de registros a ser retornado. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasFuncoesBynomeParcialnumeroRegistrosWithHttpInfo($nome_parcial, $numero_registros = null)
    {
        // verify the required parameter 'nome_parcial' is set
        if ($nome_parcial === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nome_parcial when calling tabelasFuncoesBynomeParcialnumeroRegistros');
        }
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/Funcoes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($nome_parcial !== null) {
            $queryParams['nomeParcial'] = $this->apiClient->getSerializer()->toQueryValue($nome_parcial);
        }
        // query params
        if ($numero_registros !== null) {
            $queryParams['numeroRegistros'] = $this->apiClient->getSerializer()->toQueryValue($numero_registros);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/Funcoes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasIdiomas
     *
     * Lista de Idiomas
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasIdiomas()
    {
        list($response) = $this->tabelasIdiomasWithHttpInfo();
        return $response;
    }

    /**
     * Operation tabelasIdiomasWithHttpInfo
     *
     * Lista de Idiomas
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasIdiomasWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/Idiomas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/Idiomas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasInstituicoesBynomeParcialnivelCursonumeroRegistros
     *
     * Instituições de insino.
     *
     * @param string $nome_parcial Nome parcial para pesquisa das instituições. (required)
     * @param string $nivel_curso Nível do curso a ser considerado. Envie vazio caso seja indiferente. (optional)
     * @param int $numero_registros Número de registros a ser retornado. Default: 10. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasInstituicoesBynomeParcialnivelCursonumeroRegistros($nome_parcial, $nivel_curso = null, $numero_registros = null)
    {
        list($response) = $this->tabelasInstituicoesBynomeParcialnivelCursonumeroRegistrosWithHttpInfo($nome_parcial, $nivel_curso, $numero_registros);
        return $response;
    }

    /**
     * Operation tabelasInstituicoesBynomeParcialnivelCursonumeroRegistrosWithHttpInfo
     *
     * Instituições de insino.
     *
     * @param string $nome_parcial Nome parcial para pesquisa das instituições. (required)
     * @param string $nivel_curso Nível do curso a ser considerado. Envie vazio caso seja indiferente. (optional)
     * @param int $numero_registros Número de registros a ser retornado. Default: 10. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasInstituicoesBynomeParcialnivelCursonumeroRegistrosWithHttpInfo($nome_parcial, $nivel_curso = null, $numero_registros = null)
    {
        // verify the required parameter 'nome_parcial' is set
        if ($nome_parcial === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nome_parcial when calling tabelasInstituicoesBynomeParcialnivelCursonumeroRegistros');
        }
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/Instituicoes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($nome_parcial !== null) {
            $queryParams['nomeParcial'] = $this->apiClient->getSerializer()->toQueryValue($nome_parcial);
        }
        // query params
        if ($nivel_curso !== null) {
            $queryParams['nivelCurso'] = $this->apiClient->getSerializer()->toQueryValue($nivel_curso);
        }
        // query params
        if ($numero_registros !== null) {
            $queryParams['numeroRegistros'] = $this->apiClient->getSerializer()->toQueryValue($numero_registros);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/Instituicoes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasRacas
     *
     * Lista de Raças
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasRacas()
    {
        list($response) = $this->tabelasRacasWithHttpInfo();
        return $response;
    }

    /**
     * Operation tabelasRacasWithHttpInfo
     *
     * Lista de Raças
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasRacasWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/Racas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/Racas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tabelasTiposVeiculos
     *
     * Lista de Tipos de Veículo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function tabelasTiposVeiculos()
    {
        list($response) = $this->tabelasTiposVeiculosWithHttpInfo();
        return $response;
    }

    /**
     * Operation tabelasTiposVeiculosWithHttpInfo
     *
     * Lista de Tipos de Veículo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tabelasTiposVeiculosWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1.0/Tabelas/TiposVeiculos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v1.0/Tabelas/TiposVeiculos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
