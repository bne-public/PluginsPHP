<?php
/**
 * CurriculoApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CurriculoApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CurriculoApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CurriculoApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation curriculoDownloadArquivoBycpf
     *
     * @param double $cpf  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function curriculoDownloadArquivoBycpf($cpf)
    {
        list($response) = $this->curriculoDownloadArquivoBycpfWithHttpInfo($cpf);
        return $response;
    }

    /**
     * Operation curriculoDownloadArquivoBycpfWithHttpInfo
     *
     * @param double $cpf  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function curriculoDownloadArquivoBycpfWithHttpInfo($cpf)
    {
        // verify the required parameter 'cpf' is set
        if ($cpf === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cpf when calling curriculoDownloadArquivoBycpf');
        }
        // parse inputs
        $resourcePath = "/v1.0/Curriculo/DownloadArquivo";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($cpf !== null) {
            $queryParams['cpf'] = $this->apiClient->getSerializer()->toQueryValue($cpf);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/v1.0/Curriculo/DownloadArquivo'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation curriculoGetCadastroCVBycpf
     *
     * Obtem os dados do cadastro do currículo.
     *
     * @param double $cpf CPF do currículo a ser carregado. Somente usuários administradores podem informar esse parâmetro. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function curriculoGetCadastroCVBycpf($cpf = null)
    {
        list($response) = $this->curriculoGetCadastroCVBycpfWithHttpInfo($cpf);
        return $response;
    }

    /**
     * Operation curriculoGetCadastroCVBycpfWithHttpInfo
     *
     * Obtem os dados do cadastro do currículo.
     *
     * @param double $cpf CPF do currículo a ser carregado. Somente usuários administradores podem informar esse parâmetro. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function curriculoGetCadastroCVBycpfWithHttpInfo($cpf = null)
    {
        // parse inputs
        $resourcePath = "/v1.0/Curriculo/CadastroCV";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($cpf !== null) {
            $queryParams['cpf'] = $this->apiClient->getSerializer()->toQueryValue($cpf);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/v1.0/Curriculo/CadastroCV'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation curriculoObterCVByIdCurriculoFlgDadosdeContato
     *
     * Retorna o curriculo selecionado pelo usuario a partir do IdCurriculo.
     *
     * @param int $id_curriculo Id do currículo a ser retornado. (required)
     * @param bool $flg_dadosde_contato Indica se deseja que os dados de contato devem ser retornados. Se true, a consulta será contabilizada como visualização do currículo e será descontada do plano do cliente. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function curriculoObterCVByIdCurriculoFlgDadosdeContato($id_curriculo, $flg_dadosde_contato)
    {
        list($response) = $this->curriculoObterCVByIdCurriculoFlgDadosdeContatoWithHttpInfo($id_curriculo, $flg_dadosde_contato);
        return $response;
    }

    /**
     * Operation curriculoObterCVByIdCurriculoFlgDadosdeContatoWithHttpInfo
     *
     * Retorna o curriculo selecionado pelo usuario a partir do IdCurriculo.
     *
     * @param int $id_curriculo Id do currículo a ser retornado. (required)
     * @param bool $flg_dadosde_contato Indica se deseja que os dados de contato devem ser retornados. Se true, a consulta será contabilizada como visualização do currículo e será descontada do plano do cliente. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function curriculoObterCVByIdCurriculoFlgDadosdeContatoWithHttpInfo($id_curriculo, $flg_dadosde_contato)
    {
        // verify the required parameter 'id_curriculo' is set
        if ($id_curriculo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_curriculo when calling curriculoObterCVByIdCurriculoFlgDadosdeContato');
        }
        // verify the required parameter 'flg_dadosde_contato' is set
        if ($flg_dadosde_contato === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flg_dadosde_contato when calling curriculoObterCVByIdCurriculoFlgDadosdeContato');
        }
        // parse inputs
        $resourcePath = "/v1.0/Curriculo/ObterCV";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($id_curriculo !== null) {
            $queryParams['IdCurriculo'] = $this->apiClient->getSerializer()->toQueryValue($id_curriculo);
        }
        // query params
        if ($flg_dadosde_contato !== null) {
            $queryParams['FlgDadosdeContato'] = $this->apiClient->getSerializer()->toQueryValue($flg_dadosde_contato);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/v1.0/Curriculo/ObterCV'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation curriculoObterCVPorCpfBycpfnascimento
     *
     * Retorna o curriculo selecionado pelo usuario a partir do CPF e Data de Nascimento.
     *
     * @param double $cpf Cpf do curriculo desejado (required)
     * @param \DateTime $nascimento Data de nascimento do currículo desejado (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function curriculoObterCVPorCpfBycpfnascimento($cpf, $nascimento)
    {
        list($response) = $this->curriculoObterCVPorCpfBycpfnascimentoWithHttpInfo($cpf, $nascimento);
        return $response;
    }

    /**
     * Operation curriculoObterCVPorCpfBycpfnascimentoWithHttpInfo
     *
     * Retorna o curriculo selecionado pelo usuario a partir do CPF e Data de Nascimento.
     *
     * @param double $cpf Cpf do curriculo desejado (required)
     * @param \DateTime $nascimento Data de nascimento do currículo desejado (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function curriculoObterCVPorCpfBycpfnascimentoWithHttpInfo($cpf, $nascimento)
    {
        // verify the required parameter 'cpf' is set
        if ($cpf === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cpf when calling curriculoObterCVPorCpfBycpfnascimento');
        }
        // verify the required parameter 'nascimento' is set
        if ($nascimento === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nascimento when calling curriculoObterCVPorCpfBycpfnascimento');
        }
        // parse inputs
        $resourcePath = "/v1.0/Curriculo/ObterCVPorCpf";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($cpf !== null) {
            $queryParams['cpf'] = $this->apiClient->getSerializer()->toQueryValue($cpf);
        }
        // query params
        if ($nascimento !== null) {
            $queryParams['nascimento'] = $this->apiClient->getSerializer()->toQueryValue($nascimento);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/v1.0/Curriculo/ObterCVPorCpf'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation curriculoObterCadastroCVByIdCurriculoFlgDadosdeContato
     *
     * Retorna o cadastro do curriculo selecionado pelo usuario a partir do IdCurriculo.
     *
     * @param int $id_curriculo Id do currículo a ser retornado. (required)
     * @param bool $flg_dadosde_contato Indica se deseja que os dados de contato devem ser retornados. Se true, a consulta será contabilizada como visualização do currículo e será descontada do plano do cliente. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function curriculoObterCadastroCVByIdCurriculoFlgDadosdeContato($id_curriculo, $flg_dadosde_contato)
    {
        list($response) = $this->curriculoObterCadastroCVByIdCurriculoFlgDadosdeContatoWithHttpInfo($id_curriculo, $flg_dadosde_contato);
        return $response;
    }

    /**
     * Operation curriculoObterCadastroCVByIdCurriculoFlgDadosdeContatoWithHttpInfo
     *
     * Retorna o cadastro do curriculo selecionado pelo usuario a partir do IdCurriculo.
     *
     * @param int $id_curriculo Id do currículo a ser retornado. (required)
     * @param bool $flg_dadosde_contato Indica se deseja que os dados de contato devem ser retornados. Se true, a consulta será contabilizada como visualização do currículo e será descontada do plano do cliente. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function curriculoObterCadastroCVByIdCurriculoFlgDadosdeContatoWithHttpInfo($id_curriculo, $flg_dadosde_contato)
    {
        // verify the required parameter 'id_curriculo' is set
        if ($id_curriculo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_curriculo when calling curriculoObterCadastroCVByIdCurriculoFlgDadosdeContato');
        }
        // verify the required parameter 'flg_dadosde_contato' is set
        if ($flg_dadosde_contato === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flg_dadosde_contato when calling curriculoObterCadastroCVByIdCurriculoFlgDadosdeContato');
        }
        // parse inputs
        $resourcePath = "/v1.0/Curriculo/ObterCadastroCV";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($id_curriculo !== null) {
            $queryParams['IdCurriculo'] = $this->apiClient->getSerializer()->toQueryValue($id_curriculo);
        }
        // query params
        if ($flg_dadosde_contato !== null) {
            $queryParams['FlgDadosdeContato'] = $this->apiClient->getSerializer()->toQueryValue($flg_dadosde_contato);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/v1.0/Curriculo/ObterCadastroCV'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation curriculoPesquisaAvancadaByfiltros
     *
     * Retorna uma lista de currículos baseada nos parâmetros informados.
     *
     * @param \Swagger\Client\Model\Filtros $filtros Objeto com os filtros a serem aplicados na pesquisa de curriculos (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2003
     */
    public function curriculoPesquisaAvancadaByfiltros($filtros)
    {
        list($response) = $this->curriculoPesquisaAvancadaByfiltrosWithHttpInfo($filtros);
        return $response;
    }

    /**
     * Operation curriculoPesquisaAvancadaByfiltrosWithHttpInfo
     *
     * Retorna uma lista de currículos baseada nos parâmetros informados.
     *
     * @param \Swagger\Client\Model\Filtros $filtros Objeto com os filtros a serem aplicados na pesquisa de curriculos (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function curriculoPesquisaAvancadaByfiltrosWithHttpInfo($filtros)
    {
        // verify the required parameter 'filtros' is set
        if ($filtros === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filtros when calling curriculoPesquisaAvancadaByfiltros');
        }
        // parse inputs
        $resourcePath = "/v1.0/Curriculo/PesquisaAvancada";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($filtros)) {
            $_tempBody = $filtros;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/v1.0/Curriculo/PesquisaAvancada'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation curriculoPostCadastroCVBycurriculo
     *
     * Cadastra um novo currículo
     *
     * @param \Swagger\Client\Model\Curriculo1 $curriculo  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function curriculoPostCadastroCVBycurriculo($curriculo)
    {
        list($response) = $this->curriculoPostCadastroCVBycurriculoWithHttpInfo($curriculo);
        return $response;
    }

    /**
     * Operation curriculoPostCadastroCVBycurriculoWithHttpInfo
     *
     * Cadastra um novo currículo
     *
     * @param \Swagger\Client\Model\Curriculo1 $curriculo  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function curriculoPostCadastroCVBycurriculoWithHttpInfo($curriculo)
    {
        // verify the required parameter 'curriculo' is set
        if ($curriculo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $curriculo when calling curriculoPostCadastroCVBycurriculo');
        }
        // parse inputs
        $resourcePath = "/v1.0/Curriculo/CadastroCV";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($curriculo)) {
            $_tempBody = $curriculo;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/v1.0/Curriculo/CadastroCV'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation curriculoPostFotoByfile
     *
     * Atualiza a foto do currículo
     *
     * @param \SplFileObject $file  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function curriculoPostFotoByfile($file = null)
    {
        list($response) = $this->curriculoPostFotoByfileWithHttpInfo($file);
        return $response;
    }

    /**
     * Operation curriculoPostFotoByfileWithHttpInfo
     *
     * Atualiza a foto do currículo
     *
     * @param \SplFileObject $file  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function curriculoPostFotoByfileWithHttpInfo($file = null)
    {
        // parse inputs
        $resourcePath = "/v1.0/Curriculo/Foto";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/v1.0/Curriculo/Foto'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation curriculoPutCadastroCVBycurriculo
     *
     * Atualiza um currículo
     *
     * @param \Swagger\Client\Model\Curriculo $curriculo Dados do currículo para atualização (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function curriculoPutCadastroCVBycurriculo($curriculo)
    {
        list($response) = $this->curriculoPutCadastroCVBycurriculoWithHttpInfo($curriculo);
        return $response;
    }

    /**
     * Operation curriculoPutCadastroCVBycurriculoWithHttpInfo
     *
     * Atualiza um currículo
     *
     * @param \Swagger\Client\Model\Curriculo $curriculo Dados do currículo para atualização (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function curriculoPutCadastroCVBycurriculoWithHttpInfo($curriculo)
    {
        // verify the required parameter 'curriculo' is set
        if ($curriculo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $curriculo when calling curriculoPutCadastroCVBycurriculo');
        }
        // parse inputs
        $resourcePath = "/v1.0/Curriculo/CadastroCV";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($curriculo)) {
            $_tempBody = $curriculo;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/v1.0/Curriculo/CadastroCV'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation curriculoValidateImageByba
     *
     * Valida o MimeType de uma imagem, ou se consegue abrir o arquivo corretamente usando o objeto Image
     *
     * @param string $ba A imagem (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return bool
     */
    public function curriculoValidateImageByba($ba)
    {
        list($response) = $this->curriculoValidateImageBybaWithHttpInfo($ba);
        return $response;
    }

    /**
     * Operation curriculoValidateImageBybaWithHttpInfo
     *
     * Valida o MimeType de uma imagem, ou se consegue abrir o arquivo corretamente usando o objeto Image
     *
     * @param string $ba A imagem (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function curriculoValidateImageBybaWithHttpInfo($ba)
    {
        // verify the required parameter 'ba' is set
        if ($ba === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ba when calling curriculoValidateImageByba');
        }
        // parse inputs
        $resourcePath = "/v1.0/Curriculo/ValidateImage";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($ba)) {
            $_tempBody = $ba;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/v1.0/Curriculo/ValidateImage'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
