<?php
/**
 * PesquisaCurriculo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PesquisaCurriculo Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PesquisaCurriculo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PesquisaCurriculo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'registros_por_pagina' => 'int',
        'pagina' => 'int',
        'funcao' => 'string',
        'lista_funcoes' => 'string[]',
        'cidade' => 'string',
        'disponibilidades' => 'string[]',
        'palavra_chave' => 'string',
        'excluir_palavra_chave' => 'string',
        'palavra_chave_experiencia' => 'string',
        'funcao_experiencia' => 'string',
        'estado' => 'string',
        'escolaridade' => 'string',
        'sexo' => 'string',
        'idade_minima' => 'int',
        'idade_maxima' => 'int',
        'salario_minimo' => 'double',
        'salario_maximo' => 'double',
        'quantidade_experiencia' => 'int',
        'idioma' => 'string[]',
        'cod_cpf_nome' => 'string',
        'estado_civil' => 'string',
        'bairro' => 'string',
        'logradouro' => 'string',
        'cep_minimo' => 'string',
        'cep_maximo' => 'string',
        'curso_tecnico_graduacao' => 'string',
        'instituicao_tecnico_graduacao' => 'string',
        'curso_outros_cursos' => 'string',
        'instituicao_outros_cursos' => 'string',
        'empresa_que_ja_trabalhou' => 'string',
        'area_empresa_que_ja_trabalhou' => 'string',
        'categoria_habilitacao' => 'string',
        'ddd_telefone' => 'string',
        'numero_telefone' => 'string',
        'email' => 'string',
        'deficiencia' => 'string',
        'tipo_veiculo' => 'string',
        'raca' => 'string',
        'possui_filhos' => 'bool',
        'quero_contratar_estagiarios' => 'bool',
        'formacao' => '\Swagger\Client\Model\V10CurriculoPesquisaAvancadaFormacao',
        'cpf' => 'string',
        'data_nascimento' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'registros_por_pagina' => 'int32',
        'pagina' => 'int32',
        'funcao' => null,
        'lista_funcoes' => null,
        'cidade' => null,
        'disponibilidades' => null,
        'palavra_chave' => null,
        'excluir_palavra_chave' => null,
        'palavra_chave_experiencia' => null,
        'funcao_experiencia' => null,
        'estado' => null,
        'escolaridade' => null,
        'sexo' => null,
        'idade_minima' => 'int32',
        'idade_maxima' => 'int32',
        'salario_minimo' => 'double',
        'salario_maximo' => 'double',
        'quantidade_experiencia' => 'int64',
        'idioma' => null,
        'cod_cpf_nome' => null,
        'estado_civil' => null,
        'bairro' => null,
        'logradouro' => null,
        'cep_minimo' => null,
        'cep_maximo' => null,
        'curso_tecnico_graduacao' => null,
        'instituicao_tecnico_graduacao' => null,
        'curso_outros_cursos' => null,
        'instituicao_outros_cursos' => null,
        'empresa_que_ja_trabalhou' => null,
        'area_empresa_que_ja_trabalhou' => null,
        'categoria_habilitacao' => null,
        'ddd_telefone' => null,
        'numero_telefone' => null,
        'email' => null,
        'deficiencia' => null,
        'tipo_veiculo' => null,
        'raca' => null,
        'possui_filhos' => null,
        'quero_contratar_estagiarios' => null,
        'formacao' => null,
        'cpf' => null,
        'data_nascimento' => 'date-time'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'registros_por_pagina' => 'RegistrosPorPagina',
        'pagina' => 'Pagina',
        'funcao' => 'Funcao',
        'lista_funcoes' => 'ListaFuncoes',
        'cidade' => 'Cidade',
        'disponibilidades' => 'Disponibilidades',
        'palavra_chave' => 'PalavraChave',
        'excluir_palavra_chave' => 'ExcluirPalavraChave',
        'palavra_chave_experiencia' => 'PalavraChaveExperiencia',
        'funcao_experiencia' => 'FuncaoExperiencia',
        'estado' => 'Estado',
        'escolaridade' => 'Escolaridade',
        'sexo' => 'Sexo',
        'idade_minima' => 'IdadeMinima',
        'idade_maxima' => 'IdadeMaxima',
        'salario_minimo' => 'SalarioMinimo',
        'salario_maximo' => 'SalarioMaximo',
        'quantidade_experiencia' => 'QuantidadeExperiencia',
        'idioma' => 'Idioma',
        'cod_cpf_nome' => 'CodCPFNome',
        'estado_civil' => 'EstadoCivil',
        'bairro' => 'Bairro',
        'logradouro' => 'Logradouro',
        'cep_minimo' => 'CEPMinimo',
        'cep_maximo' => 'CEPMaximo',
        'curso_tecnico_graduacao' => 'CursoTecnicoGraduacao',
        'instituicao_tecnico_graduacao' => 'InstituicaoTecnicoGraduacao',
        'curso_outros_cursos' => 'CursoOutrosCursos',
        'instituicao_outros_cursos' => 'InstituicaoOutrosCursos',
        'empresa_que_ja_trabalhou' => 'EmpresaQueJaTrabalhou',
        'area_empresa_que_ja_trabalhou' => 'AreaEmpresaQueJaTrabalhou',
        'categoria_habilitacao' => 'CategoriaHabilitacao',
        'ddd_telefone' => 'DDDTelefone',
        'numero_telefone' => 'NumeroTelefone',
        'email' => 'Email',
        'deficiencia' => 'Deficiencia',
        'tipo_veiculo' => 'TipoVeiculo',
        'raca' => 'Raca',
        'possui_filhos' => 'PossuiFilhos',
        'quero_contratar_estagiarios' => 'QueroContratarEstagiarios',
        'formacao' => 'Formacao',
        'cpf' => 'CPF',
        'data_nascimento' => 'DataNascimento'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'registros_por_pagina' => 'setRegistrosPorPagina',
        'pagina' => 'setPagina',
        'funcao' => 'setFuncao',
        'lista_funcoes' => 'setListaFuncoes',
        'cidade' => 'setCidade',
        'disponibilidades' => 'setDisponibilidades',
        'palavra_chave' => 'setPalavraChave',
        'excluir_palavra_chave' => 'setExcluirPalavraChave',
        'palavra_chave_experiencia' => 'setPalavraChaveExperiencia',
        'funcao_experiencia' => 'setFuncaoExperiencia',
        'estado' => 'setEstado',
        'escolaridade' => 'setEscolaridade',
        'sexo' => 'setSexo',
        'idade_minima' => 'setIdadeMinima',
        'idade_maxima' => 'setIdadeMaxima',
        'salario_minimo' => 'setSalarioMinimo',
        'salario_maximo' => 'setSalarioMaximo',
        'quantidade_experiencia' => 'setQuantidadeExperiencia',
        'idioma' => 'setIdioma',
        'cod_cpf_nome' => 'setCodCpfNome',
        'estado_civil' => 'setEstadoCivil',
        'bairro' => 'setBairro',
        'logradouro' => 'setLogradouro',
        'cep_minimo' => 'setCepMinimo',
        'cep_maximo' => 'setCepMaximo',
        'curso_tecnico_graduacao' => 'setCursoTecnicoGraduacao',
        'instituicao_tecnico_graduacao' => 'setInstituicaoTecnicoGraduacao',
        'curso_outros_cursos' => 'setCursoOutrosCursos',
        'instituicao_outros_cursos' => 'setInstituicaoOutrosCursos',
        'empresa_que_ja_trabalhou' => 'setEmpresaQueJaTrabalhou',
        'area_empresa_que_ja_trabalhou' => 'setAreaEmpresaQueJaTrabalhou',
        'categoria_habilitacao' => 'setCategoriaHabilitacao',
        'ddd_telefone' => 'setDddTelefone',
        'numero_telefone' => 'setNumeroTelefone',
        'email' => 'setEmail',
        'deficiencia' => 'setDeficiencia',
        'tipo_veiculo' => 'setTipoVeiculo',
        'raca' => 'setRaca',
        'possui_filhos' => 'setPossuiFilhos',
        'quero_contratar_estagiarios' => 'setQueroContratarEstagiarios',
        'formacao' => 'setFormacao',
        'cpf' => 'setCpf',
        'data_nascimento' => 'setDataNascimento'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'registros_por_pagina' => 'getRegistrosPorPagina',
        'pagina' => 'getPagina',
        'funcao' => 'getFuncao',
        'lista_funcoes' => 'getListaFuncoes',
        'cidade' => 'getCidade',
        'disponibilidades' => 'getDisponibilidades',
        'palavra_chave' => 'getPalavraChave',
        'excluir_palavra_chave' => 'getExcluirPalavraChave',
        'palavra_chave_experiencia' => 'getPalavraChaveExperiencia',
        'funcao_experiencia' => 'getFuncaoExperiencia',
        'estado' => 'getEstado',
        'escolaridade' => 'getEscolaridade',
        'sexo' => 'getSexo',
        'idade_minima' => 'getIdadeMinima',
        'idade_maxima' => 'getIdadeMaxima',
        'salario_minimo' => 'getSalarioMinimo',
        'salario_maximo' => 'getSalarioMaximo',
        'quantidade_experiencia' => 'getQuantidadeExperiencia',
        'idioma' => 'getIdioma',
        'cod_cpf_nome' => 'getCodCpfNome',
        'estado_civil' => 'getEstadoCivil',
        'bairro' => 'getBairro',
        'logradouro' => 'getLogradouro',
        'cep_minimo' => 'getCepMinimo',
        'cep_maximo' => 'getCepMaximo',
        'curso_tecnico_graduacao' => 'getCursoTecnicoGraduacao',
        'instituicao_tecnico_graduacao' => 'getInstituicaoTecnicoGraduacao',
        'curso_outros_cursos' => 'getCursoOutrosCursos',
        'instituicao_outros_cursos' => 'getInstituicaoOutrosCursos',
        'empresa_que_ja_trabalhou' => 'getEmpresaQueJaTrabalhou',
        'area_empresa_que_ja_trabalhou' => 'getAreaEmpresaQueJaTrabalhou',
        'categoria_habilitacao' => 'getCategoriaHabilitacao',
        'ddd_telefone' => 'getDddTelefone',
        'numero_telefone' => 'getNumeroTelefone',
        'email' => 'getEmail',
        'deficiencia' => 'getDeficiencia',
        'tipo_veiculo' => 'getTipoVeiculo',
        'raca' => 'getRaca',
        'possui_filhos' => 'getPossuiFilhos',
        'quero_contratar_estagiarios' => 'getQueroContratarEstagiarios',
        'formacao' => 'getFormacao',
        'cpf' => 'getCpf',
        'data_nascimento' => 'getDataNascimento'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const DISPONIBILIDADES_MANHA = 'Manha';
    const DISPONIBILIDADES_TARDE = 'Tarde';
    const DISPONIBILIDADES_NOITE = 'Noite';
    const DISPONIBILIDADES_SBADO = 'Sábado';
    const DISPONIBILIDADES_DOMINGO = 'Domingo';
    const DISPONIBILIDADES_VIAGEM = 'Viagem';
    const SEXO_MASCULINO = 'Masculino';
    const SEXO_FEMININO = 'Feminino';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDisponibilidadesAllowableValues()
    {
        return [
            self::DISPONIBILIDADES_MANHA,
            self::DISPONIBILIDADES_TARDE,
            self::DISPONIBILIDADES_NOITE,
            self::DISPONIBILIDADES_SBADO,
            self::DISPONIBILIDADES_DOMINGO,
            self::DISPONIBILIDADES_VIAGEM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSexoAllowableValues()
    {
        return [
            self::SEXO_MASCULINO,
            self::SEXO_FEMININO,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['registros_por_pagina'] = isset($data['registros_por_pagina']) ? $data['registros_por_pagina'] : null;
        $this->container['pagina'] = isset($data['pagina']) ? $data['pagina'] : null;
        $this->container['funcao'] = isset($data['funcao']) ? $data['funcao'] : null;
        $this->container['lista_funcoes'] = isset($data['lista_funcoes']) ? $data['lista_funcoes'] : null;
        $this->container['cidade'] = isset($data['cidade']) ? $data['cidade'] : null;
        $this->container['disponibilidades'] = isset($data['disponibilidades']) ? $data['disponibilidades'] : null;
        $this->container['palavra_chave'] = isset($data['palavra_chave']) ? $data['palavra_chave'] : null;
        $this->container['excluir_palavra_chave'] = isset($data['excluir_palavra_chave']) ? $data['excluir_palavra_chave'] : null;
        $this->container['palavra_chave_experiencia'] = isset($data['palavra_chave_experiencia']) ? $data['palavra_chave_experiencia'] : null;
        $this->container['funcao_experiencia'] = isset($data['funcao_experiencia']) ? $data['funcao_experiencia'] : null;
        $this->container['estado'] = isset($data['estado']) ? $data['estado'] : null;
        $this->container['escolaridade'] = isset($data['escolaridade']) ? $data['escolaridade'] : null;
        $this->container['sexo'] = isset($data['sexo']) ? $data['sexo'] : null;
        $this->container['idade_minima'] = isset($data['idade_minima']) ? $data['idade_minima'] : null;
        $this->container['idade_maxima'] = isset($data['idade_maxima']) ? $data['idade_maxima'] : null;
        $this->container['salario_minimo'] = isset($data['salario_minimo']) ? $data['salario_minimo'] : null;
        $this->container['salario_maximo'] = isset($data['salario_maximo']) ? $data['salario_maximo'] : null;
        $this->container['quantidade_experiencia'] = isset($data['quantidade_experiencia']) ? $data['quantidade_experiencia'] : null;
        $this->container['idioma'] = isset($data['idioma']) ? $data['idioma'] : null;
        $this->container['cod_cpf_nome'] = isset($data['cod_cpf_nome']) ? $data['cod_cpf_nome'] : null;
        $this->container['estado_civil'] = isset($data['estado_civil']) ? $data['estado_civil'] : null;
        $this->container['bairro'] = isset($data['bairro']) ? $data['bairro'] : null;
        $this->container['logradouro'] = isset($data['logradouro']) ? $data['logradouro'] : null;
        $this->container['cep_minimo'] = isset($data['cep_minimo']) ? $data['cep_minimo'] : null;
        $this->container['cep_maximo'] = isset($data['cep_maximo']) ? $data['cep_maximo'] : null;
        $this->container['curso_tecnico_graduacao'] = isset($data['curso_tecnico_graduacao']) ? $data['curso_tecnico_graduacao'] : null;
        $this->container['instituicao_tecnico_graduacao'] = isset($data['instituicao_tecnico_graduacao']) ? $data['instituicao_tecnico_graduacao'] : null;
        $this->container['curso_outros_cursos'] = isset($data['curso_outros_cursos']) ? $data['curso_outros_cursos'] : null;
        $this->container['instituicao_outros_cursos'] = isset($data['instituicao_outros_cursos']) ? $data['instituicao_outros_cursos'] : null;
        $this->container['empresa_que_ja_trabalhou'] = isset($data['empresa_que_ja_trabalhou']) ? $data['empresa_que_ja_trabalhou'] : null;
        $this->container['area_empresa_que_ja_trabalhou'] = isset($data['area_empresa_que_ja_trabalhou']) ? $data['area_empresa_que_ja_trabalhou'] : null;
        $this->container['categoria_habilitacao'] = isset($data['categoria_habilitacao']) ? $data['categoria_habilitacao'] : null;
        $this->container['ddd_telefone'] = isset($data['ddd_telefone']) ? $data['ddd_telefone'] : null;
        $this->container['numero_telefone'] = isset($data['numero_telefone']) ? $data['numero_telefone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['deficiencia'] = isset($data['deficiencia']) ? $data['deficiencia'] : null;
        $this->container['tipo_veiculo'] = isset($data['tipo_veiculo']) ? $data['tipo_veiculo'] : null;
        $this->container['raca'] = isset($data['raca']) ? $data['raca'] : null;
        $this->container['possui_filhos'] = isset($data['possui_filhos']) ? $data['possui_filhos'] : null;
        $this->container['quero_contratar_estagiarios'] = isset($data['quero_contratar_estagiarios']) ? $data['quero_contratar_estagiarios'] : null;
        $this->container['formacao'] = isset($data['formacao']) ? $data['formacao'] : null;
        $this->container['cpf'] = isset($data['cpf']) ? $data['cpf'] : null;
        $this->container['data_nascimento'] = isset($data['data_nascimento']) ? $data['data_nascimento'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getSexoAllowableValues();
        if (!in_array($this->container['sexo'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'sexo', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getSexoAllowableValues();
        if (!in_array($this->container['sexo'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets registros_por_pagina
     * @return int
     */
    public function getRegistrosPorPagina()
    {
        return $this->container['registros_por_pagina'];
    }

    /**
     * Sets registros_por_pagina
     * @param int $registros_por_pagina Número de registros a ser retornado por página
     * @return $this
     */
    public function setRegistrosPorPagina($registros_por_pagina)
    {
        $this->container['registros_por_pagina'] = $registros_por_pagina;

        return $this;
    }

    /**
     * Gets pagina
     * @return int
     */
    public function getPagina()
    {
        return $this->container['pagina'];
    }

    /**
     * Sets pagina
     * @param int $pagina Número da página, iniciando em 1
     * @return $this
     */
    public function setPagina($pagina)
    {
        $this->container['pagina'] = $pagina;

        return $this;
    }

    /**
     * Gets funcao
     * @return string
     */
    public function getFuncao()
    {
        return $this->container['funcao'];
    }

    /**
     * Sets funcao
     * @param string $funcao Um dos valores presentes da Tabela de Funções
     * @return $this
     */
    public function setFuncao($funcao)
    {
        $this->container['funcao'] = $funcao;

        return $this;
    }

    /**
     * Gets lista_funcoes
     * @return string[]
     */
    public function getListaFuncoes()
    {
        return $this->container['lista_funcoes'];
    }

    /**
     * Sets lista_funcoes
     * @param string[] $lista_funcoes Lista com as funcoes desejadas.  Mesma funcionalidade do campo Funcao, podendo indicar uma série de valores.  Indicar valores presentes da Tabela de Funções.
     * @return $this
     */
    public function setListaFuncoes($lista_funcoes)
    {
        $this->container['lista_funcoes'] = $lista_funcoes;

        return $this;
    }

    /**
     * Gets cidade
     * @return string
     */
    public function getCidade()
    {
        return $this->container['cidade'];
    }

    /**
     * Sets cidade
     * @param string $cidade Um dos valores presentes da Tabela de Cidades. Enviar no formato nome-da-cidade/UF.
     * @return $this
     */
    public function setCidade($cidade)
    {
        $this->container['cidade'] = $cidade;

        return $this;
    }

    /**
     * Gets disponibilidades
     * @return string[]
     */
    public function getDisponibilidades()
    {
        return $this->container['disponibilidades'];
    }

    /**
     * Sets disponibilidades
     * @param string[] $disponibilidades Lista de disponibilidades
     * @return $this
     */
    public function setDisponibilidades($disponibilidades)
    {
        $allowed_values = $this->getDisponibilidadesAllowableValues();
        if (!is_null($disponibilidades) && array_diff($disponibilidades, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'disponibilidades', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['disponibilidades'] = $disponibilidades;

        return $this;
    }

    /**
     * Gets palavra_chave
     * @return string
     */
    public function getPalavraChave()
    {
        return $this->container['palavra_chave'];
    }

    /**
     * Sets palavra_chave
     * @param string $palavra_chave Palavra chave a ser pesquisada em todo o currículo.
     * @return $this
     */
    public function setPalavraChave($palavra_chave)
    {
        $this->container['palavra_chave'] = $palavra_chave;

        return $this;
    }

    /**
     * Gets excluir_palavra_chave
     * @return string
     */
    public function getExcluirPalavraChave()
    {
        return $this->container['excluir_palavra_chave'];
    }

    /**
     * Sets excluir_palavra_chave
     * @param string $excluir_palavra_chave Currículos com essa(s) palavra(s) chave(s) serão excluídos do resultado.
     * @return $this
     */
    public function setExcluirPalavraChave($excluir_palavra_chave)
    {
        $this->container['excluir_palavra_chave'] = $excluir_palavra_chave;

        return $this;
    }

    /**
     * Gets palavra_chave_experiencia
     * @return string
     */
    public function getPalavraChaveExperiencia()
    {
        return $this->container['palavra_chave_experiencia'];
    }

    /**
     * Sets palavra_chave_experiencia
     * @param string $palavra_chave_experiencia Palavra chave a ser pesquisada nas experiências.
     * @return $this
     */
    public function setPalavraChaveExperiencia($palavra_chave_experiencia)
    {
        $this->container['palavra_chave_experiencia'] = $palavra_chave_experiencia;

        return $this;
    }

    /**
     * Gets funcao_experiencia
     * @return string
     */
    public function getFuncaoExperiencia()
    {
        return $this->container['funcao_experiencia'];
    }

    /**
     * Sets funcao_experiencia
     * @param string $funcao_experiencia Pesquisa a função nas exoeriências do usuário. Recomenda-se informar um dos valores presentes da Tabela de Funções
     * @return $this
     */
    public function setFuncaoExperiencia($funcao_experiencia)
    {
        $this->container['funcao_experiencia'] = $funcao_experiencia;

        return $this;
    }

    /**
     * Gets estado
     * @return string
     */
    public function getEstado()
    {
        return $this->container['estado'];
    }

    /**
     * Sets estado
     * @param string $estado Sigla de um dos estados brasileiros
     * @return $this
     */
    public function setEstado($estado)
    {
        $this->container['estado'] = $estado;

        return $this;
    }

    /**
     * Gets escolaridade
     * @return string
     */
    public function getEscolaridade()
    {
        return $this->container['escolaridade'];
    }

    /**
     * Sets escolaridade
     * @param string $escolaridade Um dos valores presentes na Tabela Escolaridades.
     * @return $this
     */
    public function setEscolaridade($escolaridade)
    {
        $this->container['escolaridade'] = $escolaridade;

        return $this;
    }

    /**
     * Gets sexo
     * @return string
     */
    public function getSexo()
    {
        return $this->container['sexo'];
    }

    /**
     * Sets sexo
     * @param string $sexo Sexo informado no currículo.
     * @return $this
     */
    public function setSexo($sexo)
    {
        $allowed_values = $this->getSexoAllowableValues();
        if (!is_null($sexo) && !in_array($sexo, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sexo', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['sexo'] = $sexo;

        return $this;
    }

    /**
     * Gets idade_minima
     * @return int
     */
    public function getIdadeMinima()
    {
        return $this->container['idade_minima'];
    }

    /**
     * Sets idade_minima
     * @param int $idade_minima Idade Mínima informada no currículo.
     * @return $this
     */
    public function setIdadeMinima($idade_minima)
    {
        $this->container['idade_minima'] = $idade_minima;

        return $this;
    }

    /**
     * Gets idade_maxima
     * @return int
     */
    public function getIdadeMaxima()
    {
        return $this->container['idade_maxima'];
    }

    /**
     * Sets idade_maxima
     * @param int $idade_maxima Idade Máxima informada no currículo.
     * @return $this
     */
    public function setIdadeMaxima($idade_maxima)
    {
        $this->container['idade_maxima'] = $idade_maxima;

        return $this;
    }

    /**
     * Gets salario_minimo
     * @return double
     */
    public function getSalarioMinimo()
    {
        return $this->container['salario_minimo'];
    }

    /**
     * Sets salario_minimo
     * @param double $salario_minimo Salário Mínimo informada no currículo no formato americano.
     * @return $this
     */
    public function setSalarioMinimo($salario_minimo)
    {
        $this->container['salario_minimo'] = $salario_minimo;

        return $this;
    }

    /**
     * Gets salario_maximo
     * @return double
     */
    public function getSalarioMaximo()
    {
        return $this->container['salario_maximo'];
    }

    /**
     * Sets salario_maximo
     * @param double $salario_maximo Salário Máximo informada no currículo no formato americano.
     * @return $this
     */
    public function setSalarioMaximo($salario_maximo)
    {
        $this->container['salario_maximo'] = $salario_maximo;

        return $this;
    }

    /**
     * Gets quantidade_experiencia
     * @return int
     */
    public function getQuantidadeExperiencia()
    {
        return $this->container['quantidade_experiencia'];
    }

    /**
     * Sets quantidade_experiencia
     * @param int $quantidade_experiencia Quantidade de experiência mínima em meses.
     * @return $this
     */
    public function setQuantidadeExperiencia($quantidade_experiencia)
    {
        $this->container['quantidade_experiencia'] = $quantidade_experiencia;

        return $this;
    }

    /**
     * Gets idioma
     * @return string[]
     */
    public function getIdioma()
    {
        return $this->container['idioma'];
    }

    /**
     * Sets idioma
     * @param string[] $idioma Lista com os valores presentes no Enumerador Idiomas
     * @return $this
     */
    public function setIdioma($idioma)
    {
        $this->container['idioma'] = $idioma;

        return $this;
    }

    /**
     * Gets cod_cpf_nome
     * @return string
     */
    public function getCodCpfNome()
    {
        return $this->container['cod_cpf_nome'];
    }

    /**
     * Sets cod_cpf_nome
     * @param string $cod_cpf_nome Indicar o código do currículo (BNE), CPF ou Nome. Utilizado para buscar um currículo específico.
     * @return $this
     */
    public function setCodCpfNome($cod_cpf_nome)
    {
        $this->container['cod_cpf_nome'] = $cod_cpf_nome;

        return $this;
    }

    /**
     * Gets estado_civil
     * @return string
     */
    public function getEstadoCivil()
    {
        return $this->container['estado_civil'];
    }

    /**
     * Sets estado_civil
     * @param string $estado_civil Indicar um dos valores presentes no Enumerador Estado Civil.
     * @return $this
     */
    public function setEstadoCivil($estado_civil)
    {
        $this->container['estado_civil'] = $estado_civil;

        return $this;
    }

    /**
     * Gets bairro
     * @return string
     */
    public function getBairro()
    {
        return $this->container['bairro'];
    }

    /**
     * Sets bairro
     * @param string $bairro Bairro do candidato.
     * @return $this
     */
    public function setBairro($bairro)
    {
        $this->container['bairro'] = $bairro;

        return $this;
    }

    /**
     * Gets logradouro
     * @return string
     */
    public function getLogradouro()
    {
        return $this->container['logradouro'];
    }

    /**
     * Sets logradouro
     * @param string $logradouro Endereço do candidato.
     * @return $this
     */
    public function setLogradouro($logradouro)
    {
        $this->container['logradouro'] = $logradouro;

        return $this;
    }

    /**
     * Gets cep_minimo
     * @return string
     */
    public function getCepMinimo()
    {
        return $this->container['cep_minimo'];
    }

    /**
     * Sets cep_minimo
     * @param string $cep_minimo CEP mínimo do endereço do candidato
     * @return $this
     */
    public function setCepMinimo($cep_minimo)
    {
        $this->container['cep_minimo'] = $cep_minimo;

        return $this;
    }

    /**
     * Gets cep_maximo
     * @return string
     */
    public function getCepMaximo()
    {
        return $this->container['cep_maximo'];
    }

    /**
     * Sets cep_maximo
     * @param string $cep_maximo CEP máximo do endereço do candidato
     * @return $this
     */
    public function setCepMaximo($cep_maximo)
    {
        $this->container['cep_maximo'] = $cep_maximo;

        return $this;
    }

    /**
     * Gets curso_tecnico_graduacao
     * @return string
     */
    public function getCursoTecnicoGraduacao()
    {
        return $this->container['curso_tecnico_graduacao'];
    }

    /**
     * Sets curso_tecnico_graduacao
     * @param string $curso_tecnico_graduacao Curso técnico ou de graduação desejado
     * @return $this
     */
    public function setCursoTecnicoGraduacao($curso_tecnico_graduacao)
    {
        $this->container['curso_tecnico_graduacao'] = $curso_tecnico_graduacao;

        return $this;
    }

    /**
     * Gets instituicao_tecnico_graduacao
     * @return string
     */
    public function getInstituicaoTecnicoGraduacao()
    {
        return $this->container['instituicao_tecnico_graduacao'];
    }

    /**
     * Sets instituicao_tecnico_graduacao
     * @param string $instituicao_tecnico_graduacao Instituição de ensino do curso técnico ou de graduação desejada
     * @return $this
     */
    public function setInstituicaoTecnicoGraduacao($instituicao_tecnico_graduacao)
    {
        $this->container['instituicao_tecnico_graduacao'] = $instituicao_tecnico_graduacao;

        return $this;
    }

    /**
     * Gets curso_outros_cursos
     * @return string
     */
    public function getCursoOutrosCursos()
    {
        return $this->container['curso_outros_cursos'];
    }

    /**
     * Sets curso_outros_cursos
     * @param string $curso_outros_cursos Cursos adicionais.
     * @return $this
     */
    public function setCursoOutrosCursos($curso_outros_cursos)
    {
        $this->container['curso_outros_cursos'] = $curso_outros_cursos;

        return $this;
    }

    /**
     * Gets instituicao_outros_cursos
     * @return string
     */
    public function getInstituicaoOutrosCursos()
    {
        return $this->container['instituicao_outros_cursos'];
    }

    /**
     * Sets instituicao_outros_cursos
     * @param string $instituicao_outros_cursos Instituição do curso adicional
     * @return $this
     */
    public function setInstituicaoOutrosCursos($instituicao_outros_cursos)
    {
        $this->container['instituicao_outros_cursos'] = $instituicao_outros_cursos;

        return $this;
    }

    /**
     * Gets empresa_que_ja_trabalhou
     * @return string
     */
    public function getEmpresaQueJaTrabalhou()
    {
        return $this->container['empresa_que_ja_trabalhou'];
    }

    /**
     * Sets empresa_que_ja_trabalhou
     * @param string $empresa_que_ja_trabalhou Empresa presente nas experiências
     * @return $this
     */
    public function setEmpresaQueJaTrabalhou($empresa_que_ja_trabalhou)
    {
        $this->container['empresa_que_ja_trabalhou'] = $empresa_que_ja_trabalhou;

        return $this;
    }

    /**
     * Gets area_empresa_que_ja_trabalhou
     * @return string
     */
    public function getAreaEmpresaQueJaTrabalhou()
    {
        return $this->container['area_empresa_que_ja_trabalhou'];
    }

    /**
     * Sets area_empresa_que_ja_trabalhou
     * @param string $area_empresa_que_ja_trabalhou Indicar um dos valores presentes na tabela Areas
     * @return $this
     */
    public function setAreaEmpresaQueJaTrabalhou($area_empresa_que_ja_trabalhou)
    {
        $this->container['area_empresa_que_ja_trabalhou'] = $area_empresa_que_ja_trabalhou;

        return $this;
    }

    /**
     * Gets categoria_habilitacao
     * @return string
     */
    public function getCategoriaHabilitacao()
    {
        return $this->container['categoria_habilitacao'];
    }

    /**
     * Sets categoria_habilitacao
     * @param string $categoria_habilitacao Indicar um dos valores presentes na tabela CategoriasHabilitacao
     * @return $this
     */
    public function setCategoriaHabilitacao($categoria_habilitacao)
    {
        $this->container['categoria_habilitacao'] = $categoria_habilitacao;

        return $this;
    }

    /**
     * Gets ddd_telefone
     * @return string
     */
    public function getDddTelefone()
    {
        return $this->container['ddd_telefone'];
    }

    /**
     * Sets ddd_telefone
     * @param string $ddd_telefone DDD do telefone do candidato
     * @return $this
     */
    public function setDddTelefone($ddd_telefone)
    {
        $this->container['ddd_telefone'] = $ddd_telefone;

        return $this;
    }

    /**
     * Gets numero_telefone
     * @return string
     */
    public function getNumeroTelefone()
    {
        return $this->container['numero_telefone'];
    }

    /**
     * Sets numero_telefone
     * @param string $numero_telefone Número do telefone do candidato
     * @return $this
     */
    public function setNumeroTelefone($numero_telefone)
    {
        $this->container['numero_telefone'] = $numero_telefone;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email E-mail do candidato
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets deficiencia
     * @return string
     */
    public function getDeficiencia()
    {
        return $this->container['deficiencia'];
    }

    /**
     * Sets deficiencia
     * @param string $deficiencia Indicar um dos valores presentes na tabela Deficiencias
     * @return $this
     */
    public function setDeficiencia($deficiencia)
    {
        $this->container['deficiencia'] = $deficiencia;

        return $this;
    }

    /**
     * Gets tipo_veiculo
     * @return string
     */
    public function getTipoVeiculo()
    {
        return $this->container['tipo_veiculo'];
    }

    /**
     * Sets tipo_veiculo
     * @param string $tipo_veiculo Indicar um dos valores presentes na tabela TiposVeiculo
     * @return $this
     */
    public function setTipoVeiculo($tipo_veiculo)
    {
        $this->container['tipo_veiculo'] = $tipo_veiculo;

        return $this;
    }

    /**
     * Gets raca
     * @return string
     */
    public function getRaca()
    {
        return $this->container['raca'];
    }

    /**
     * Sets raca
     * @param string $raca Indicar um dos valores presentes na tabela Racas
     * @return $this
     */
    public function setRaca($raca)
    {
        $this->container['raca'] = $raca;

        return $this;
    }

    /**
     * Gets possui_filhos
     * @return bool
     */
    public function getPossuiFilhos()
    {
        return $this->container['possui_filhos'];
    }

    /**
     * Sets possui_filhos
     * @param bool $possui_filhos Indicar true, se desejar filtrar candidatos com filhos
     * @return $this
     */
    public function setPossuiFilhos($possui_filhos)
    {
        $this->container['possui_filhos'] = $possui_filhos;

        return $this;
    }

    /**
     * Gets quero_contratar_estagiarios
     * @return bool
     */
    public function getQueroContratarEstagiarios()
    {
        return $this->container['quero_contratar_estagiarios'];
    }

    /**
     * Sets quero_contratar_estagiarios
     * @param bool $quero_contratar_estagiarios Indicar true, se desejar filtrar candidatos com perfil de estágio.
     * @return $this
     */
    public function setQueroContratarEstagiarios($quero_contratar_estagiarios)
    {
        $this->container['quero_contratar_estagiarios'] = $quero_contratar_estagiarios;

        return $this;
    }

    /**
     * Gets formacao
     * @return \Swagger\Client\Model\V10CurriculoPesquisaAvancadaFormacao
     */
    public function getFormacao()
    {
        return $this->container['formacao'];
    }

    /**
     * Sets formacao
     * @param \Swagger\Client\Model\V10CurriculoPesquisaAvancadaFormacao $formacao
     * @return $this
     */
    public function setFormacao($formacao)
    {
        $this->container['formacao'] = $formacao;

        return $this;
    }

    /**
     * Gets cpf
     * @return string
     */
    public function getCpf()
    {
        return $this->container['cpf'];
    }

    /**
     * Sets cpf
     * @param string $cpf CPF do usuário que está efetuando a requisição
     * @return $this
     */
    public function setCpf($cpf)
    {
        $this->container['cpf'] = $cpf;

        return $this;
    }

    /**
     * Gets data_nascimento
     * @return \DateTime
     */
    public function getDataNascimento()
    {
        return $this->container['data_nascimento'];
    }

    /**
     * Sets data_nascimento
     * @param \DateTime $data_nascimento Data de nascimento do usuário que está efetuando a requisição
     * @return $this
     */
    public function setDataNascimento($data_nascimento)
    {
        $this->container['data_nascimento'] = $data_nascimento;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


