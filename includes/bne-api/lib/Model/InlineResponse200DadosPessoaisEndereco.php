<?php
/**
 * InlineResponse200DadosPessoaisEndereco
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InlineResponse200DadosPessoaisEndereco Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200DadosPessoaisEndereco implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_DadosPessoais_Endereco';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cep' => 'double',
        'logradouro' => 'string',
        'numero' => 'string',
        'complemento' => 'string',
        'bairro' => 'string',
        'cidade' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cep' => 'double',
        'logradouro' => null,
        'numero' => null,
        'complemento' => null,
        'bairro' => null,
        'cidade' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cep' => 'Cep',
        'logradouro' => 'Logradouro',
        'numero' => 'Numero',
        'complemento' => 'Complemento',
        'bairro' => 'Bairro',
        'cidade' => 'Cidade'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cep' => 'setCep',
        'logradouro' => 'setLogradouro',
        'numero' => 'setNumero',
        'complemento' => 'setComplemento',
        'bairro' => 'setBairro',
        'cidade' => 'setCidade'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cep' => 'getCep',
        'logradouro' => 'getLogradouro',
        'numero' => 'getNumero',
        'complemento' => 'getComplemento',
        'bairro' => 'getBairro',
        'cidade' => 'getCidade'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cep'] = isset($data['cep']) ? $data['cep'] : null;
        $this->container['logradouro'] = isset($data['logradouro']) ? $data['logradouro'] : null;
        $this->container['numero'] = isset($data['numero']) ? $data['numero'] : null;
        $this->container['complemento'] = isset($data['complemento']) ? $data['complemento'] : null;
        $this->container['bairro'] = isset($data['bairro']) ? $data['bairro'] : null;
        $this->container['cidade'] = isset($data['cidade']) ? $data['cidade'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['cep'] === null) {
            $invalid_properties[] = "'cep' can't be null";
        }
        if ($this->container['logradouro'] === null) {
            $invalid_properties[] = "'logradouro' can't be null";
        }
        if ($this->container['numero'] === null) {
            $invalid_properties[] = "'numero' can't be null";
        }
        if ($this->container['bairro'] === null) {
            $invalid_properties[] = "'bairro' can't be null";
        }
        if ($this->container['cidade'] === null) {
            $invalid_properties[] = "'cidade' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['cep'] === null) {
            return false;
        }
        if ($this->container['logradouro'] === null) {
            return false;
        }
        if ($this->container['numero'] === null) {
            return false;
        }
        if ($this->container['bairro'] === null) {
            return false;
        }
        if ($this->container['cidade'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets cep
     * @return double
     */
    public function getCep()
    {
        return $this->container['cep'];
    }

    /**
     * Sets cep
     * @param double $cep Cep do endereço
     * @return $this
     */
    public function setCep($cep)
    {
        $this->container['cep'] = $cep;

        return $this;
    }

    /**
     * Gets logradouro
     * @return string
     */
    public function getLogradouro()
    {
        return $this->container['logradouro'];
    }

    /**
     * Sets logradouro
     * @param string $logradouro Nome da rua, avenida, travessa, etc
     * @return $this
     */
    public function setLogradouro($logradouro)
    {
        $this->container['logradouro'] = $logradouro;

        return $this;
    }

    /**
     * Gets numero
     * @return string
     */
    public function getNumero()
    {
        return $this->container['numero'];
    }

    /**
     * Sets numero
     * @param string $numero Número do endereço.  Aceita string caso o número não esteja disponível.  Recomenda-se o envio de SN para esses casos
     * @return $this
     */
    public function setNumero($numero)
    {
        $this->container['numero'] = $numero;

        return $this;
    }

    /**
     * Gets complemento
     * @return string
     */
    public function getComplemento()
    {
        return $this->container['complemento'];
    }

    /**
     * Sets complemento
     * @param string $complemento Complemento do endereço
     * @return $this
     */
    public function setComplemento($complemento)
    {
        $this->container['complemento'] = $complemento;

        return $this;
    }

    /**
     * Gets bairro
     * @return string
     */
    public function getBairro()
    {
        return $this->container['bairro'];
    }

    /**
     * Sets bairro
     * @param string $bairro Bairro do endereço.
     * @return $this
     */
    public function setBairro($bairro)
    {
        $this->container['bairro'] = $bairro;

        return $this;
    }

    /**
     * Gets cidade
     * @return string
     */
    public function getCidade()
    {
        return $this->container['cidade'];
    }

    /**
     * Sets cidade
     * @param string $cidade Nome da cidade no formato \"NomeCidade/SiglaEstado\" (Ex.: São Paulo/SP)
     * @return $this
     */
    public function setCidade($cidade)
    {
        $this->container['cidade'] = $cidade;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


