<?php
/**
 * QueryVagas
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * QueryVagas Class Doc Comment
 *
 * @category    Class
 * @description Parâmetros para a pesquisa de vaga
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QueryVagas implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QueryVagas';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pagina' => 'int',
        'registros_por_pagina' => 'int',
        'query' => 'string',
        'salario_minimo' => 'double',
        'salario_maximo' => 'double',
        'tipo_vinculo' => 'string[]',
        'funcao' => 'string[]',
        'area' => 'string[]',
        'escolaridade' => 'string[]',
        'deficiencia' => 'string[]',
        'disponibilidade' => 'string[]',
        'sigla_estado' => 'string[]',
        'nome_cidade' => 'string[]',
        'empresa' => 'string[]',
        'data_inicio' => '\DateTime',
        'data_fim' => '\DateTime',
        'id_origem' => 'int[]',
        'oportunidade' => 'bool',
        'ordenacao' => 'string',
        'curso' => 'string[]',
        'id_curso' => 'int[]',
        'curriculo' => 'int',
        'oferece_curso' => 'bool',
        'funcao_agrupadora' => 'int',
        'cidade_regiao' => 'int',
        'idf_filial' => 'int',
        'confidencial' => 'bool',
        'campanha' => 'bool',
        'usuario_filial' => 'int[]',
        'facet_field' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pagina' => 'int32',
        'registros_por_pagina' => 'int32',
        'query' => null,
        'salario_minimo' => 'double',
        'salario_maximo' => 'double',
        'tipo_vinculo' => null,
        'funcao' => null,
        'area' => null,
        'escolaridade' => null,
        'deficiencia' => null,
        'disponibilidade' => null,
        'sigla_estado' => null,
        'nome_cidade' => null,
        'empresa' => null,
        'data_inicio' => 'date-time',
        'data_fim' => 'date-time',
        'id_origem' => 'int32',
        'oportunidade' => null,
        'ordenacao' => null,
        'curso' => null,
        'id_curso' => 'int32',
        'curriculo' => 'int32',
        'oferece_curso' => null,
        'funcao_agrupadora' => 'int32',
        'cidade_regiao' => 'int32',
        'idf_filial' => 'int32',
        'confidencial' => null,
        'campanha' => null,
        'usuario_filial' => 'int32',
        'facet_field' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'pagina' => 'Pagina',
        'registros_por_pagina' => 'RegistrosPorPagina',
        'query' => 'Query',
        'salario_minimo' => 'SalarioMinimo',
        'salario_maximo' => 'SalarioMaximo',
        'tipo_vinculo' => 'TipoVinculo',
        'funcao' => 'Funcao',
        'area' => 'Area',
        'escolaridade' => 'Escolaridade',
        'deficiencia' => 'Deficiencia',
        'disponibilidade' => 'Disponibilidade',
        'sigla_estado' => 'SiglaEstado',
        'nome_cidade' => 'NomeCidade',
        'empresa' => 'Empresa',
        'data_inicio' => 'DataInicio',
        'data_fim' => 'DataFim',
        'id_origem' => 'IdOrigem',
        'oportunidade' => 'Oportunidade',
        'ordenacao' => 'Ordenacao',
        'curso' => 'Curso',
        'id_curso' => 'IdCurso',
        'curriculo' => 'Curriculo',
        'oferece_curso' => 'OfereceCurso',
        'funcao_agrupadora' => 'FuncaoAgrupadora',
        'cidade_regiao' => 'CidadeRegiao',
        'idf_filial' => 'IdfFilial',
        'confidencial' => 'Confidencial',
        'campanha' => 'Campanha',
        'usuario_filial' => 'UsuarioFilial',
        'facet_field' => 'FacetField'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'pagina' => 'setPagina',
        'registros_por_pagina' => 'setRegistrosPorPagina',
        'query' => 'setQuery',
        'salario_minimo' => 'setSalarioMinimo',
        'salario_maximo' => 'setSalarioMaximo',
        'tipo_vinculo' => 'setTipoVinculo',
        'funcao' => 'setFuncao',
        'area' => 'setArea',
        'escolaridade' => 'setEscolaridade',
        'deficiencia' => 'setDeficiencia',
        'disponibilidade' => 'setDisponibilidade',
        'sigla_estado' => 'setSiglaEstado',
        'nome_cidade' => 'setNomeCidade',
        'empresa' => 'setEmpresa',
        'data_inicio' => 'setDataInicio',
        'data_fim' => 'setDataFim',
        'id_origem' => 'setIdOrigem',
        'oportunidade' => 'setOportunidade',
        'ordenacao' => 'setOrdenacao',
        'curso' => 'setCurso',
        'id_curso' => 'setIdCurso',
        'curriculo' => 'setCurriculo',
        'oferece_curso' => 'setOfereceCurso',
        'funcao_agrupadora' => 'setFuncaoAgrupadora',
        'cidade_regiao' => 'setCidadeRegiao',
        'idf_filial' => 'setIdfFilial',
        'confidencial' => 'setConfidencial',
        'campanha' => 'setCampanha',
        'usuario_filial' => 'setUsuarioFilial',
        'facet_field' => 'setFacetField'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'pagina' => 'getPagina',
        'registros_por_pagina' => 'getRegistrosPorPagina',
        'query' => 'getQuery',
        'salario_minimo' => 'getSalarioMinimo',
        'salario_maximo' => 'getSalarioMaximo',
        'tipo_vinculo' => 'getTipoVinculo',
        'funcao' => 'getFuncao',
        'area' => 'getArea',
        'escolaridade' => 'getEscolaridade',
        'deficiencia' => 'getDeficiencia',
        'disponibilidade' => 'getDisponibilidade',
        'sigla_estado' => 'getSiglaEstado',
        'nome_cidade' => 'getNomeCidade',
        'empresa' => 'getEmpresa',
        'data_inicio' => 'getDataInicio',
        'data_fim' => 'getDataFim',
        'id_origem' => 'getIdOrigem',
        'oportunidade' => 'getOportunidade',
        'ordenacao' => 'getOrdenacao',
        'curso' => 'getCurso',
        'id_curso' => 'getIdCurso',
        'curriculo' => 'getCurriculo',
        'oferece_curso' => 'getOfereceCurso',
        'funcao_agrupadora' => 'getFuncaoAgrupadora',
        'cidade_regiao' => 'getCidadeRegiao',
        'idf_filial' => 'getIdfFilial',
        'confidencial' => 'getConfidencial',
        'campanha' => 'getCampanha',
        'usuario_filial' => 'getUsuarioFilial',
        'facet_field' => 'getFacetField'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TIPO_VINCULO_APRENDIZ = 'Aprendiz';
    const TIPO_VINCULO_AUTONOMO = 'Autonomo';
    const TIPO_VINCULO_EFETIVO = 'Efetivo';
    const TIPO_VINCULO_ESTAGIO = 'Estagio';
    const TIPO_VINCULO_FREELANCER = 'Freelancer';
    const TIPO_VINCULO_TEMPORARIO = 'Temporario';
    const DEFICIENCIA_NENHUMA = 'Nenhuma';
    const DEFICIENCIA_FSICA = 'Física';
    const DEFICIENCIA_AUDITIVA = 'Auditiva';
    const DEFICIENCIA_VISUAL = 'Visual';
    const DEFICIENCIA_MENTAL = 'Mental';
    const DEFICIENCIA_MLTIPLA = 'Múltipla';
    const DEFICIENCIA_REABILITADO = 'Reabilitado';
    const DEFICIENCIA_QUALQUER = 'Qualquer';
    const DISPONIBILIDADE_MANHA = 'Manha';
    const DISPONIBILIDADE_TARDE = 'Tarde';
    const DISPONIBILIDADE_NOITE = 'Noite';
    const DISPONIBILIDADE_SBADO = 'Sábado';
    const DISPONIBILIDADE_DOMINGO = 'Domingo';
    const DISPONIBILIDADE_VIAGEM = 'Viagem';
    const FACET_FIELD_SIGLA_ESTADO = 'SiglaEstado';
    const FACET_FIELD_NOME_CIDADE = 'NomeCidade';
    const FACET_FIELD_NOME_EMPRESA = 'NomeEmpresa';
    const FACET_FIELD_AREA = 'Area';
    const FACET_FIELD_ESCOLARIDADE = 'Escolaridade';
    const FACET_FIELD_CURSO = 'Curso';
    const FACET_FIELD_DEFICIENCIA = 'Deficiencia';
    const FACET_FIELD_FUNCAO = 'Funcao';
    const FACET_FIELD_TIPO_VINCULO = 'TipoVinculo';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTipoVinculoAllowableValues()
    {
        return [
            self::TIPO_VINCULO_APRENDIZ,
            self::TIPO_VINCULO_AUTONOMO,
            self::TIPO_VINCULO_EFETIVO,
            self::TIPO_VINCULO_ESTAGIO,
            self::TIPO_VINCULO_FREELANCER,
            self::TIPO_VINCULO_TEMPORARIO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDeficienciaAllowableValues()
    {
        return [
            self::DEFICIENCIA_NENHUMA,
            self::DEFICIENCIA_FSICA,
            self::DEFICIENCIA_AUDITIVA,
            self::DEFICIENCIA_VISUAL,
            self::DEFICIENCIA_MENTAL,
            self::DEFICIENCIA_MLTIPLA,
            self::DEFICIENCIA_REABILITADO,
            self::DEFICIENCIA_QUALQUER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDisponibilidadeAllowableValues()
    {
        return [
            self::DISPONIBILIDADE_MANHA,
            self::DISPONIBILIDADE_TARDE,
            self::DISPONIBILIDADE_NOITE,
            self::DISPONIBILIDADE_SBADO,
            self::DISPONIBILIDADE_DOMINGO,
            self::DISPONIBILIDADE_VIAGEM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFacetFieldAllowableValues()
    {
        return [
            self::FACET_FIELD_SIGLA_ESTADO,
            self::FACET_FIELD_NOME_CIDADE,
            self::FACET_FIELD_NOME_EMPRESA,
            self::FACET_FIELD_AREA,
            self::FACET_FIELD_ESCOLARIDADE,
            self::FACET_FIELD_CURSO,
            self::FACET_FIELD_DEFICIENCIA,
            self::FACET_FIELD_FUNCAO,
            self::FACET_FIELD_TIPO_VINCULO,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pagina'] = isset($data['pagina']) ? $data['pagina'] : null;
        $this->container['registros_por_pagina'] = isset($data['registros_por_pagina']) ? $data['registros_por_pagina'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['salario_minimo'] = isset($data['salario_minimo']) ? $data['salario_minimo'] : null;
        $this->container['salario_maximo'] = isset($data['salario_maximo']) ? $data['salario_maximo'] : null;
        $this->container['tipo_vinculo'] = isset($data['tipo_vinculo']) ? $data['tipo_vinculo'] : null;
        $this->container['funcao'] = isset($data['funcao']) ? $data['funcao'] : null;
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['escolaridade'] = isset($data['escolaridade']) ? $data['escolaridade'] : null;
        $this->container['deficiencia'] = isset($data['deficiencia']) ? $data['deficiencia'] : null;
        $this->container['disponibilidade'] = isset($data['disponibilidade']) ? $data['disponibilidade'] : null;
        $this->container['sigla_estado'] = isset($data['sigla_estado']) ? $data['sigla_estado'] : null;
        $this->container['nome_cidade'] = isset($data['nome_cidade']) ? $data['nome_cidade'] : null;
        $this->container['empresa'] = isset($data['empresa']) ? $data['empresa'] : null;
        $this->container['data_inicio'] = isset($data['data_inicio']) ? $data['data_inicio'] : null;
        $this->container['data_fim'] = isset($data['data_fim']) ? $data['data_fim'] : null;
        $this->container['id_origem'] = isset($data['id_origem']) ? $data['id_origem'] : null;
        $this->container['oportunidade'] = isset($data['oportunidade']) ? $data['oportunidade'] : null;
        $this->container['ordenacao'] = isset($data['ordenacao']) ? $data['ordenacao'] : null;
        $this->container['curso'] = isset($data['curso']) ? $data['curso'] : null;
        $this->container['id_curso'] = isset($data['id_curso']) ? $data['id_curso'] : null;
        $this->container['curriculo'] = isset($data['curriculo']) ? $data['curriculo'] : null;
        $this->container['oferece_curso'] = isset($data['oferece_curso']) ? $data['oferece_curso'] : null;
        $this->container['funcao_agrupadora'] = isset($data['funcao_agrupadora']) ? $data['funcao_agrupadora'] : null;
        $this->container['cidade_regiao'] = isset($data['cidade_regiao']) ? $data['cidade_regiao'] : null;
        $this->container['idf_filial'] = isset($data['idf_filial']) ? $data['idf_filial'] : null;
        $this->container['confidencial'] = isset($data['confidencial']) ? $data['confidencial'] : null;
        $this->container['campanha'] = isset($data['campanha']) ? $data['campanha'] : null;
        $this->container['usuario_filial'] = isset($data['usuario_filial']) ? $data['usuario_filial'] : null;
        $this->container['facet_field'] = isset($data['facet_field']) ? $data['facet_field'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets pagina
     * @return int
     */
    public function getPagina()
    {
        return $this->container['pagina'];
    }

    /**
     * Sets pagina
     * @param int $pagina Página a ser retornada. Iniciando em 1.
     * @return $this
     */
    public function setPagina($pagina)
    {
        $this->container['pagina'] = $pagina;

        return $this;
    }

    /**
     * Gets registros_por_pagina
     * @return int
     */
    public function getRegistrosPorPagina()
    {
        return $this->container['registros_por_pagina'];
    }

    /**
     * Sets registros_por_pagina
     * @param int $registros_por_pagina Número de registros por página
     * @return $this
     */
    public function setRegistrosPorPagina($registros_por_pagina)
    {
        $this->container['registros_por_pagina'] = $registros_por_pagina;

        return $this;
    }

    /**
     * Gets query
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     * @param string $query Pesquisa textual
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets salario_minimo
     * @return double
     */
    public function getSalarioMinimo()
    {
        return $this->container['salario_minimo'];
    }

    /**
     * Sets salario_minimo
     * @param double $salario_minimo Salário mínimo oferecido pela vaga
     * @return $this
     */
    public function setSalarioMinimo($salario_minimo)
    {
        $this->container['salario_minimo'] = $salario_minimo;

        return $this;
    }

    /**
     * Gets salario_maximo
     * @return double
     */
    public function getSalarioMaximo()
    {
        return $this->container['salario_maximo'];
    }

    /**
     * Sets salario_maximo
     * @param double $salario_maximo Salário máximo oferecido pela vaga
     * @return $this
     */
    public function setSalarioMaximo($salario_maximo)
    {
        $this->container['salario_maximo'] = $salario_maximo;

        return $this;
    }

    /**
     * Gets tipo_vinculo
     * @return string[]
     */
    public function getTipoVinculo()
    {
        return $this->container['tipo_vinculo'];
    }

    /**
     * Sets tipo_vinculo
     * @param string[] $tipo_vinculo Tipo de vínculo desejado
     * @return $this
     */
    public function setTipoVinculo($tipo_vinculo)
    {
        $allowed_values = $this->getTipoVinculoAllowableValues();
        if (!is_null($tipo_vinculo) && array_diff($tipo_vinculo, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tipo_vinculo', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['tipo_vinculo'] = $tipo_vinculo;

        return $this;
    }

    /**
     * Gets funcao
     * @return string[]
     */
    public function getFuncao()
    {
        return $this->container['funcao'];
    }

    /**
     * Sets funcao
     * @param string[] $funcao Funcão da vaga
     * @return $this
     */
    public function setFuncao($funcao)
    {
        $this->container['funcao'] = $funcao;

        return $this;
    }

    /**
     * Gets area
     * @return string[]
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     * @param string[] $area Área de atuação
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets escolaridade
     * @return string[]
     */
    public function getEscolaridade()
    {
        return $this->container['escolaridade'];
    }

    /**
     * Sets escolaridade
     * @param string[] $escolaridade Escolaridade
     * @return $this
     */
    public function setEscolaridade($escolaridade)
    {
        $this->container['escolaridade'] = $escolaridade;

        return $this;
    }

    /**
     * Gets deficiencia
     * @return string[]
     */
    public function getDeficiencia()
    {
        return $this->container['deficiencia'];
    }

    /**
     * Sets deficiencia
     * @param string[] $deficiencia Deficiência para vagas BNE
     * @return $this
     */
    public function setDeficiencia($deficiencia)
    {
        $allowed_values = $this->getDeficienciaAllowableValues();
        if (!is_null($deficiencia) && array_diff($deficiencia, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deficiencia', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['deficiencia'] = $deficiencia;

        return $this;
    }

    /**
     * Gets disponibilidade
     * @return string[]
     */
    public function getDisponibilidade()
    {
        return $this->container['disponibilidade'];
    }

    /**
     * Sets disponibilidade
     * @param string[] $disponibilidade Disponibilidade requerida para a vaga
     * @return $this
     */
    public function setDisponibilidade($disponibilidade)
    {
        $allowed_values = $this->getDisponibilidadeAllowableValues();
        if (!is_null($disponibilidade) && array_diff($disponibilidade, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'disponibilidade', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['disponibilidade'] = $disponibilidade;

        return $this;
    }

    /**
     * Gets sigla_estado
     * @return string[]
     */
    public function getSiglaEstado()
    {
        return $this->container['sigla_estado'];
    }

    /**
     * Sets sigla_estado
     * @param string[] $sigla_estado Nomes das cidades desejadas
     * @return $this
     */
    public function setSiglaEstado($sigla_estado)
    {
        $this->container['sigla_estado'] = $sigla_estado;

        return $this;
    }

    /**
     * Gets nome_cidade
     * @return string[]
     */
    public function getNomeCidade()
    {
        return $this->container['nome_cidade'];
    }

    /**
     * Sets nome_cidade
     * @param string[] $nome_cidade Nomes das cidades desejadas
     * @return $this
     */
    public function setNomeCidade($nome_cidade)
    {
        $this->container['nome_cidade'] = $nome_cidade;

        return $this;
    }

    /**
     * Gets empresa
     * @return string[]
     */
    public function getEmpresa()
    {
        return $this->container['empresa'];
    }

    /**
     * Sets empresa
     * @param string[] $empresa Nomes das empresas anunciantes
     * @return $this
     */
    public function setEmpresa($empresa)
    {
        $this->container['empresa'] = $empresa;

        return $this;
    }

    /**
     * Gets data_inicio
     * @return \DateTime
     */
    public function getDataInicio()
    {
        return $this->container['data_inicio'];
    }

    /**
     * Sets data_inicio
     * @param \DateTime $data_inicio Limite inferior para a abertura da vaga
     * @return $this
     */
    public function setDataInicio($data_inicio)
    {
        $this->container['data_inicio'] = $data_inicio;

        return $this;
    }

    /**
     * Gets data_fim
     * @return \DateTime
     */
    public function getDataFim()
    {
        return $this->container['data_fim'];
    }

    /**
     * Sets data_fim
     * @param \DateTime $data_fim Limite superior para a abertura da vaga
     * @return $this
     */
    public function setDataFim($data_fim)
    {
        $this->container['data_fim'] = $data_fim;

        return $this;
    }

    /**
     * Gets id_origem
     * @return int[]
     */
    public function getIdOrigem()
    {
        return $this->container['id_origem'];
    }

    /**
     * Sets id_origem
     * @param int[] $id_origem Origem das vagas, empresas que possuem STC
     * @return $this
     */
    public function setIdOrigem($id_origem)
    {
        $this->container['id_origem'] = $id_origem;

        return $this;
    }

    /**
     * Gets oportunidade
     * @return bool
     */
    public function getOportunidade()
    {
        return $this->container['oportunidade'];
    }

    /**
     * Sets oportunidade
     * @param bool $oportunidade Trazer oportunidade (vagas abertas a mais de 60 dias)
     * @return $this
     */
    public function setOportunidade($oportunidade)
    {
        $this->container['oportunidade'] = $oportunidade;

        return $this;
    }

    /**
     * Gets ordenacao
     * @return string
     */
    public function getOrdenacao()
    {
        return $this->container['ordenacao'];
    }

    /**
     * Sets ordenacao
     * @param string $ordenacao Ordenação ex: \"Dta_Abertura asc, Des_Funcao desc\"
     * @return $this
     */
    public function setOrdenacao($ordenacao)
    {
        $this->container['ordenacao'] = $ordenacao;

        return $this;
    }

    /**
     * Gets curso
     * @return string[]
     */
    public function getCurso()
    {
        return $this->container['curso'];
    }

    /**
     * Sets curso
     * @param string[] $curso Cursos pesquisados com like
     * @return $this
     */
    public function setCurso($curso)
    {
        $this->container['curso'] = $curso;

        return $this;
    }

    /**
     * Gets id_curso
     * @return int[]
     */
    public function getIdCurso()
    {
        return $this->container['id_curso'];
    }

    /**
     * Sets id_curso
     * @param int[] $id_curso Pesquisa acertiva dos curso
     * @return $this
     */
    public function setIdCurso($id_curso)
    {
        $this->container['id_curso'] = $id_curso;

        return $this;
    }

    /**
     * Gets curriculo
     * @return int
     */
    public function getCurriculo()
    {
        return $this->container['curriculo'];
    }

    /**
     * Sets curriculo
     * @param int $curriculo Curriculo do BNE - para não trazer as vagas da empresa que o candidato bloqueou.
     * @return $this
     */
    public function setCurriculo($curriculo)
    {
        $this->container['curriculo'] = $curriculo;

        return $this;
    }

    /**
     * Gets oferece_curso
     * @return bool
     */
    public function getOfereceCurso()
    {
        return $this->container['oferece_curso'];
    }

    /**
     * Sets oferece_curso
     * @param bool $oferece_curso Vagas de empresa que oferecem curso
     * @return $this
     */
    public function setOfereceCurso($oferece_curso)
    {
        $this->container['oferece_curso'] = $oferece_curso;

        return $this;
    }

    /**
     * Gets funcao_agrupadora
     * @return int
     */
    public function getFuncaoAgrupadora()
    {
        return $this->container['funcao_agrupadora'];
    }

    /**
     * Sets funcao_agrupadora
     * @param int $funcao_agrupadora Vai retoranar as vagas com funções similares a pesquisada.
     * @return $this
     */
    public function setFuncaoAgrupadora($funcao_agrupadora)
    {
        $this->container['funcao_agrupadora'] = $funcao_agrupadora;

        return $this;
    }

    /**
     * Gets cidade_regiao
     * @return int
     */
    public function getCidadeRegiao()
    {
        return $this->container['cidade_regiao'];
    }

    /**
     * Sets cidade_regiao
     * @param int $cidade_regiao Alem das vaga da cidade ira trazer as vagas da região metropolitana.
     * @return $this
     */
    public function setCidadeRegiao($cidade_regiao)
    {
        $this->container['cidade_regiao'] = $cidade_regiao;

        return $this;
    }

    /**
     * Gets idf_filial
     * @return int
     */
    public function getIdfFilial()
    {
        return $this->container['idf_filial'];
    }

    /**
     * Sets idf_filial
     * @param int $idf_filial Buscar vagas da filial
     * @return $this
     */
    public function setIdfFilial($idf_filial)
    {
        $this->container['idf_filial'] = $idf_filial;

        return $this;
    }

    /**
     * Gets confidencial
     * @return bool
     */
    public function getConfidencial()
    {
        return $this->container['confidencial'];
    }

    /**
     * Sets confidencial
     * @param bool $confidencial Mostrar vagas Confidenciais (vaga de Empresas que optaram a não aparecer como anunciante na vaga)
     * @return $this
     */
    public function setConfidencial($confidencial)
    {
        $this->container['confidencial'] = $confidencial;

        return $this;
    }

    /**
     * Gets campanha
     * @return bool
     */
    public function getCampanha()
    {
        return $this->container['campanha'];
    }

    /**
     * Sets campanha
     * @param bool $campanha Vaga de campanha
     * @return $this
     */
    public function setCampanha($campanha)
    {
        $this->container['campanha'] = $campanha;

        return $this;
    }

    /**
     * Gets usuario_filial
     * @return int[]
     */
    public function getUsuarioFilial()
    {
        return $this->container['usuario_filial'];
    }

    /**
     * Sets usuario_filial
     * @param int[] $usuario_filial Quem Anunciou a vaga.
     * @return $this
     */
    public function setUsuarioFilial($usuario_filial)
    {
        $this->container['usuario_filial'] = $usuario_filial;

        return $this;
    }

    /**
     * Gets facet_field
     * @return string[]
     */
    public function getFacetField()
    {
        return $this->container['facet_field'];
    }

    /**
     * Sets facet_field
     * @param string[] $facet_field Campos para os quais a totalização deve ser retornada
     * @return $this
     */
    public function setFacetField($facet_field)
    {
        $allowed_values = $this->getFacetFieldAllowableValues();
        if (!is_null($facet_field) && array_diff($facet_field, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'facet_field', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['facet_field'] = $facet_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


