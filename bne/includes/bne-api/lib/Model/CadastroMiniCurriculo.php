<?php
/**
 * CadastroMiniCurriculo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CadastroMiniCurriculo Class Doc Comment
 *
 * @category    Class
 * @description Informações mínimas para um currículo
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CadastroMiniCurriculo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CadastroMiniCurriculo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email' => 'string',
        'cpf' => 'double',
        'data_nascimento' => '\DateTime',
        'ddd_celular' => 'int',
        'numero_celular' => 'double',
        'nome' => 'string',
        'sexo' => 'string',
        'cidade' => 'string',
        'escolaridade' => 'string',
        'aceito_estagio' => 'bool',
        'funcoes_pretendidas' => '\Swagger\Client\Model\InlineResponse200MiniCurriculoFuncoesPretendidas[]',
        'pretensao_salarial' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email' => null,
        'cpf' => 'double',
        'data_nascimento' => 'date-time',
        'ddd_celular' => 'int32',
        'numero_celular' => 'double',
        'nome' => null,
        'sexo' => null,
        'cidade' => null,
        'escolaridade' => null,
        'aceito_estagio' => null,
        'funcoes_pretendidas' => null,
        'pretensao_salarial' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'Email',
        'cpf' => 'Cpf',
        'data_nascimento' => 'DataNascimento',
        'ddd_celular' => 'DDDCelular',
        'numero_celular' => 'NumeroCelular',
        'nome' => 'Nome',
        'sexo' => 'Sexo',
        'cidade' => 'Cidade',
        'escolaridade' => 'Escolaridade',
        'aceito_estagio' => 'AceitoEstagio',
        'funcoes_pretendidas' => 'FuncoesPretendidas',
        'pretensao_salarial' => 'PretensaoSalarial'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'cpf' => 'setCpf',
        'data_nascimento' => 'setDataNascimento',
        'ddd_celular' => 'setDddCelular',
        'numero_celular' => 'setNumeroCelular',
        'nome' => 'setNome',
        'sexo' => 'setSexo',
        'cidade' => 'setCidade',
        'escolaridade' => 'setEscolaridade',
        'aceito_estagio' => 'setAceitoEstagio',
        'funcoes_pretendidas' => 'setFuncoesPretendidas',
        'pretensao_salarial' => 'setPretensaoSalarial'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'cpf' => 'getCpf',
        'data_nascimento' => 'getDataNascimento',
        'ddd_celular' => 'getDddCelular',
        'numero_celular' => 'getNumeroCelular',
        'nome' => 'getNome',
        'sexo' => 'getSexo',
        'cidade' => 'getCidade',
        'escolaridade' => 'getEscolaridade',
        'aceito_estagio' => 'getAceitoEstagio',
        'funcoes_pretendidas' => 'getFuncoesPretendidas',
        'pretensao_salarial' => 'getPretensaoSalarial'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SEXO_MASCULINO = 'Masculino';
    const SEXO_FEMININO = 'Feminino';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSexoAllowableValues()
    {
        return [
            self::SEXO_MASCULINO,
            self::SEXO_FEMININO,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['cpf'] = isset($data['cpf']) ? $data['cpf'] : null;
        $this->container['data_nascimento'] = isset($data['data_nascimento']) ? $data['data_nascimento'] : null;
        $this->container['ddd_celular'] = isset($data['ddd_celular']) ? $data['ddd_celular'] : null;
        $this->container['numero_celular'] = isset($data['numero_celular']) ? $data['numero_celular'] : null;
        $this->container['nome'] = isset($data['nome']) ? $data['nome'] : null;
        $this->container['sexo'] = isset($data['sexo']) ? $data['sexo'] : null;
        $this->container['cidade'] = isset($data['cidade']) ? $data['cidade'] : null;
        $this->container['escolaridade'] = isset($data['escolaridade']) ? $data['escolaridade'] : null;
        $this->container['aceito_estagio'] = isset($data['aceito_estagio']) ? $data['aceito_estagio'] : null;
        $this->container['funcoes_pretendidas'] = isset($data['funcoes_pretendidas']) ? $data['funcoes_pretendidas'] : null;
        $this->container['pretensao_salarial'] = isset($data['pretensao_salarial']) ? $data['pretensao_salarial'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['cpf'] === null) {
            $invalid_properties[] = "'cpf' can't be null";
        }
        if ($this->container['data_nascimento'] === null) {
            $invalid_properties[] = "'data_nascimento' can't be null";
        }
        if ($this->container['ddd_celular'] === null) {
            $invalid_properties[] = "'ddd_celular' can't be null";
        }
        if ($this->container['numero_celular'] === null) {
            $invalid_properties[] = "'numero_celular' can't be null";
        }
        if ($this->container['nome'] === null) {
            $invalid_properties[] = "'nome' can't be null";
        }
        if ($this->container['sexo'] === null) {
            $invalid_properties[] = "'sexo' can't be null";
        }
        $allowed_values = $this->getSexoAllowableValues();
        if (!in_array($this->container['sexo'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'sexo', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['cidade'] === null) {
            $invalid_properties[] = "'cidade' can't be null";
        }
        if ($this->container['escolaridade'] === null) {
            $invalid_properties[] = "'escolaridade' can't be null";
        }
        if ($this->container['pretensao_salarial'] === null) {
            $invalid_properties[] = "'pretensao_salarial' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['cpf'] === null) {
            return false;
        }
        if ($this->container['data_nascimento'] === null) {
            return false;
        }
        if ($this->container['ddd_celular'] === null) {
            return false;
        }
        if ($this->container['numero_celular'] === null) {
            return false;
        }
        if ($this->container['nome'] === null) {
            return false;
        }
        if ($this->container['sexo'] === null) {
            return false;
        }
        $allowed_values = $this->getSexoAllowableValues();
        if (!in_array($this->container['sexo'], $allowed_values)) {
            return false;
        }
        if ($this->container['cidade'] === null) {
            return false;
        }
        if ($this->container['escolaridade'] === null) {
            return false;
        }
        if ($this->container['pretensao_salarial'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Email do candidato
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets cpf
     * @return double
     */
    public function getCpf()
    {
        return $this->container['cpf'];
    }

    /**
     * Sets cpf
     * @param double $cpf CPF do candidato
     * @return $this
     */
    public function setCpf($cpf)
    {
        $this->container['cpf'] = $cpf;

        return $this;
    }

    /**
     * Gets data_nascimento
     * @return \DateTime
     */
    public function getDataNascimento()
    {
        return $this->container['data_nascimento'];
    }

    /**
     * Sets data_nascimento
     * @param \DateTime $data_nascimento Data dde nascimento do candidato
     * @return $this
     */
    public function setDataNascimento($data_nascimento)
    {
        $this->container['data_nascimento'] = $data_nascimento;

        return $this;
    }

    /**
     * Gets ddd_celular
     * @return int
     */
    public function getDddCelular()
    {
        return $this->container['ddd_celular'];
    }

    /**
     * Sets ddd_celular
     * @param int $ddd_celular DDD do celular do candidato
     * @return $this
     */
    public function setDddCelular($ddd_celular)
    {
        $this->container['ddd_celular'] = $ddd_celular;

        return $this;
    }

    /**
     * Gets numero_celular
     * @return double
     */
    public function getNumeroCelular()
    {
        return $this->container['numero_celular'];
    }

    /**
     * Sets numero_celular
     * @param double $numero_celular Número do celular do candidato
     * @return $this
     */
    public function setNumeroCelular($numero_celular)
    {
        $this->container['numero_celular'] = $numero_celular;

        return $this;
    }

    /**
     * Gets nome
     * @return string
     */
    public function getNome()
    {
        return $this->container['nome'];
    }

    /**
     * Sets nome
     * @param string $nome Nome do candidato
     * @return $this
     */
    public function setNome($nome)
    {
        $this->container['nome'] = $nome;

        return $this;
    }

    /**
     * Gets sexo
     * @return string
     */
    public function getSexo()
    {
        return $this->container['sexo'];
    }

    /**
     * Sets sexo
     * @param string $sexo Sexo do candidato
     * @return $this
     */
    public function setSexo($sexo)
    {
        $allowed_values = $this->getSexoAllowableValues();
        if (!in_array($sexo, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sexo', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['sexo'] = $sexo;

        return $this;
    }

    /**
     * Gets cidade
     * @return string
     */
    public function getCidade()
    {
        return $this->container['cidade'];
    }

    /**
     * Sets cidade
     * @param string $cidade Nome da cidade no formato \"NomeCidade/SiglaEstado\" (Ex.: São Paulo/SP)
     * @return $this
     */
    public function setCidade($cidade)
    {
        $this->container['cidade'] = $cidade;

        return $this;
    }

    /**
     * Gets escolaridade
     * @return string
     */
    public function getEscolaridade()
    {
        return $this->container['escolaridade'];
    }

    /**
     * Sets escolaridade
     * @param string $escolaridade Um dos valores presentes na tabela Escolaridades.  Caso o valor não esteja presente nesta tabela, será desconsiderado.
     * @return $this
     */
    public function setEscolaridade($escolaridade)
    {
        $this->container['escolaridade'] = $escolaridade;

        return $this;
    }

    /**
     * Gets aceito_estagio
     * @return bool
     */
    public function getAceitoEstagio()
    {
        return $this->container['aceito_estagio'];
    }

    /**
     * Sets aceito_estagio
     * @param bool $aceito_estagio Flag indicando se o candidato aceita trabalhar como estagiário  Considerados somente para as escolaridades \"Ensino Médio Incompleto\",   \"Técnico/Pós Médio Incompleto\", \"Tecnólogo Incompleto\" e \"Superior Incompleto\"
     * @return $this
     */
    public function setAceitoEstagio($aceito_estagio)
    {
        $this->container['aceito_estagio'] = $aceito_estagio;

        return $this;
    }

    /**
     * Gets funcoes_pretendidas
     * @return \Swagger\Client\Model\InlineResponse200MiniCurriculoFuncoesPretendidas[]
     */
    public function getFuncoesPretendidas()
    {
        return $this->container['funcoes_pretendidas'];
    }

    /**
     * Sets funcoes_pretendidas
     * @param \Swagger\Client\Model\InlineResponse200MiniCurriculoFuncoesPretendidas[] $funcoes_pretendidas Funções pretendidas pelo candidato
     * @return $this
     */
    public function setFuncoesPretendidas($funcoes_pretendidas)
    {
        $this->container['funcoes_pretendidas'] = $funcoes_pretendidas;

        return $this;
    }

    /**
     * Gets pretensao_salarial
     * @return double
     */
    public function getPretensaoSalarial()
    {
        return $this->container['pretensao_salarial'];
    }

    /**
     * Sets pretensao_salarial
     * @param double $pretensao_salarial Pretensão salarial do candidato
     * @return $this
     */
    public function setPretensaoSalarial($pretensao_salarial)
    {
        $this->container['pretensao_salarial'] = $pretensao_salarial;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


