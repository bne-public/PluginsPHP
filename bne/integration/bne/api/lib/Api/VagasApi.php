<?php
/**
 * VagasApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * VagasApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VagasApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return VagasApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation vagasAtualizarStatusByidnovoStatusVaga
     *
     * Recupera uma vaga baseada em seu ID
     *
     * @param int $id Id da Vaga a ser recuperada (required)
     * @param string $novo_status_vaga Status a ser assumido pela vaga.               O status \&quot;Inativa\&quot;, irá exibir a vaga como oportunidade para o candidato, informando que a vaga está fechada, mas a empresa aceita receber currículos com o perfil da vaga.              Para o status \&quot;Arquivada\&quot;, A vaga deixará de ser exibida para os candidatos. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2005Registros
     */
    public function vagasAtualizarStatusByidnovoStatusVaga($id, $novo_status_vaga)
    {
        list($response) = $this->vagasAtualizarStatusByidnovoStatusVagaWithHttpInfo($id, $novo_status_vaga);
        return $response;
    }

    /**
     * Operation vagasAtualizarStatusByidnovoStatusVagaWithHttpInfo
     *
     * Recupera uma vaga baseada em seu ID
     *
     * @param int $id Id da Vaga a ser recuperada (required)
     * @param string $novo_status_vaga Status a ser assumido pela vaga.               O status \&quot;Inativa\&quot;, irá exibir a vaga como oportunidade para o candidato, informando que a vaga está fechada, mas a empresa aceita receber currículos com o perfil da vaga.              Para o status \&quot;Arquivada\&quot;, A vaga deixará de ser exibida para os candidatos. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2005Registros, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasAtualizarStatusByidnovoStatusVagaWithHttpInfo($id, $novo_status_vaga)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling vagasAtualizarStatusByidnovoStatusVaga');
        }
        // verify the required parameter 'novo_status_vaga' is set
        if ($novo_status_vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $novo_status_vaga when calling vagasAtualizarStatusByidnovoStatusVaga');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/AtualizarStatus/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($novo_status_vaga !== null) {
            $queryParams['novoStatusVaga'] = $this->apiClient->getSerializer()->toQueryValue($novo_status_vaga);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2005Registros',
                '/v1.0/Vagas/AtualizarStatus/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2005Registros', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2005Registros', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasCandidatadasBytipoVinculopaginaregistrosPorPagina
     *
     * Consulta a vagas candidatadas.
     *
     * @param string $tipo_vinculo Tipo do vínculo das vagas candidatadas (optional)
     * @param int $pagina Pagina a ser retornada (optional)
     * @param int $registros_por_pagina Informações adicionais para a candidatura (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2008
     */
    public function vagasCandidatadasBytipoVinculopaginaregistrosPorPagina($tipo_vinculo = null, $pagina = null, $registros_por_pagina = null)
    {
        list($response) = $this->vagasCandidatadasBytipoVinculopaginaregistrosPorPaginaWithHttpInfo($tipo_vinculo, $pagina, $registros_por_pagina);
        return $response;
    }

    /**
     * Operation vagasCandidatadasBytipoVinculopaginaregistrosPorPaginaWithHttpInfo
     *
     * Consulta a vagas candidatadas.
     *
     * @param string $tipo_vinculo Tipo do vínculo das vagas candidatadas (optional)
     * @param int $pagina Pagina a ser retornada (optional)
     * @param int $registros_por_pagina Informações adicionais para a candidatura (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasCandidatadasBytipoVinculopaginaregistrosPorPaginaWithHttpInfo($tipo_vinculo = null, $pagina = null, $registros_por_pagina = null)
    {
        // parse inputs
        $resourcePath = "/v1.0/Vagas/Candidatadas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($tipo_vinculo !== null) {
            $queryParams['tipoVinculo'] = $this->apiClient->getSerializer()->toQueryValue($tipo_vinculo);
        }
        // query params
        if ($pagina !== null) {
            $queryParams['pagina'] = $this->apiClient->getSerializer()->toQueryValue($pagina);
        }
        // query params
        if ($registros_por_pagina !== null) {
            $queryParams['registrosPorPagina'] = $this->apiClient->getSerializer()->toQueryValue($registros_por_pagina);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2008',
                '/v1.0/Vagas/Candidatadas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2008', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2008', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasCandidatarByidVagacandidatura
     *
     * Realiza a candidatura a uma vaga.
     *
     * @param int $id_vaga Identificador da vaga (required)
     * @param \Swagger\Client\Model\Candidatura $candidatura Informações adicionais para a candidatura (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function vagasCandidatarByidVagacandidatura($id_vaga, $candidatura)
    {
        list($response) = $this->vagasCandidatarByidVagacandidaturaWithHttpInfo($id_vaga, $candidatura);
        return $response;
    }

    /**
     * Operation vagasCandidatarByidVagacandidaturaWithHttpInfo
     *
     * Realiza a candidatura a uma vaga.
     *
     * @param int $id_vaga Identificador da vaga (required)
     * @param \Swagger\Client\Model\Candidatura $candidatura Informações adicionais para a candidatura (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasCandidatarByidVagacandidaturaWithHttpInfo($id_vaga, $candidatura)
    {
        // verify the required parameter 'id_vaga' is set
        if ($id_vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_vaga when calling vagasCandidatarByidVagacandidatura');
        }
        // verify the required parameter 'candidatura' is set
        if ($candidatura === null) {
            throw new \InvalidArgumentException('Missing the required parameter $candidatura when calling vagasCandidatarByidVagacandidatura');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/Candidatar/{idVaga}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_vaga !== null) {
            $resourcePath = str_replace(
                "{" . "idVaga" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_vaga),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($candidatura)) {
            $_tempBody = $candidatura;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/v1.0/Vagas/Candidatar/{idVaga}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasDadosDaEmpresaByidVaga
     *
     * Recupera os dados da empresa que anunciou a vaga
     *
     * @param int $id_vaga  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function vagasDadosDaEmpresaByidVaga($id_vaga)
    {
        list($response) = $this->vagasDadosDaEmpresaByidVagaWithHttpInfo($id_vaga);
        return $response;
    }

    /**
     * Operation vagasDadosDaEmpresaByidVagaWithHttpInfo
     *
     * Recupera os dados da empresa que anunciou a vaga
     *
     * @param int $id_vaga  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasDadosDaEmpresaByidVagaWithHttpInfo($id_vaga)
    {
        // verify the required parameter 'id_vaga' is set
        if ($id_vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_vaga when calling vagasDadosDaEmpresaByidVaga');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/DadosDaEmpresa";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($id_vaga !== null) {
            $queryParams['idVaga'] = $this->apiClient->getSerializer()->toQueryValue($id_vaga);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2007',
                '/v1.0/Vagas/DadosDaEmpresa'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2007', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasGetByid
     *
     * Recupera uma vaga baseada em seu ID
     *
     * @param int $id Id da Vaga a ser recuperada (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2005Registros
     */
    public function vagasGetByid($id)
    {
        list($response) = $this->vagasGetByidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation vagasGetByidWithHttpInfo
     *
     * Recupera uma vaga baseada em seu ID
     *
     * @param int $id Id da Vaga a ser recuperada (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2005Registros, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasGetByidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling vagasGetByid');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2005Registros',
                '/v1.0/Vagas/{id}'
            );
           
            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2005Registros', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2005Registros', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasGet
     *
     * Pesquisa de vagas
     *
     * @param int $pagina Página a ser retornada. Iniciando em 1. (optional)
     * @param int $registros_por_pagina Número de registros por página (optional)
     * @param string $query Pesquisa textual (optional)
     * @param double $salario_minimo Salário mínimo oferecido pela vaga (optional)
     * @param double $salario_maximo Salário máximo oferecido pela vaga (optional)
     * @param string[] $tipo_vinculo Tipo de vínculo desejado (optional)
     * @param string[] $funcao Funcão da vaga (optional)
     * @param string[] $area Área de atuação (optional)
     * @param string[] $escolaridade Escolaridade (optional)
     * @param string[] $deficiencia Deficiência para vagas BNE (optional)
     * @param string[] $disponibilidade Disponibilidade requerida para a vaga (optional)
     * @param string[] $sigla_estado Nomes das cidades desejadas (optional)
     * @param string[] $nome_cidade Nomes das cidades desejadas (optional)
     * @param string[] $empresa Nomes das empresas anunciantes (optional)
     * @param \DateTime $data_inicio Limite inferior para a abertura da vaga (optional)
     * @param \DateTime $data_fim Limite superior para a abertura da vaga (optional)
     * @param int[] $id_origem Origem das vagas, empresas que possuem STC (optional)
     * @param bool $oportunidade Trazer oportunidade (vagas abertas a mais de 60 dias) (optional)
     * @param string $ordenacao Ordenação ex: \&quot;Dta_Abertura asc, Des_Funcao desc\&quot; (optional)
     * @param string[] $curso Cursos pesquisados com like (optional)
     * @param int[] $id_curso Pesquisa acertiva dos curso (optional)
     * @param int $curriculo Curriculo do BNE - para não trazer as vagas da empresa que o candidato bloqueou. (optional)
     * @param bool $oferece_curso Vagas de empresa que oferecem curso (optional)
     * @param int $funcao_agrupadora Vai retoranar as vagas com funções similares a pesquisada. (optional)
     * @param int $cidade_regiao Alem das vaga da cidade ira trazer as vagas da região metropolitana. (optional)
     * @param int $idf_filial Buscar vagas da filial (optional)
     * @param bool $confidencial Mostrar vagas Confidenciais (vaga de Empresas que optaram a não aparecer como anunciante na vaga) (optional)
     * @param bool $campanha Vaga de campanha (optional)
     * @param int[] $usuario_filial Quem Anunciou a vaga. (optional)
     * @param string[] $facet_field Campos para os quais a totalização deve ser retornada (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2006
     */
    public function vagasGet($pagina = null, 
        $registros_por_pagina = null, 
        $query = null, 
        $salario_minimo = null, 
        $salario_maximo = null, 
        $tipo_vinculo = null, 
        $funcao = null, 
        $area = null, 
        $escolaridade = null, 
        $deficiencia = null, 
        $disponibilidade = null, 
        $sigla_estado = null, 
        $nome_cidade = null, 
        $empresa = null, 
        $data_inicio = null, 
        $data_fim = null, 
        $id_origem = null, 
        $oportunidade = null, 
        $ordenacao = null, 
        $curso = null, 
        $id_curso = null, 
        $curriculo = null, 
        $oferece_curso = null, 
        $funcao_agrupadora = null, 
        $cidade_regiao = null, 
        $idf_filial = null, 
        $confidencial = null, 
        $campanha = null, 
        $usuario_filial = null, 
        $facet_field = null)
    {
		
		$qEmployer = (trim($query) != "") ? "employer " . $query : "employer";
		
        list($response) = $this->vagasGetWithHttpInfo($pagina, $registros_por_pagina, $qEmployer, $salario_minimo, $salario_maximo, $tipo_vinculo, $funcao, $area, $escolaridade, $deficiencia, $disponibilidade, $sigla_estado, $nome_cidade, $empresa, $data_inicio, $data_fim, $id_origem, $oportunidade, $ordenacao, $curso, $id_curso, $curriculo, $oferece_curso, $funcao_agrupadora, $cidade_regiao, $idf_filial, $confidencial, $campanha, $usuario_filial, $facet_field);
        return $response;
    }

    /**
     * Operation vagasGetWithHttpInfo
     *
     * Pesquisa de vagas
     *
     * @param int $pagina Página a ser retornada. Iniciando em 1. (optional)
     * @param int $registros_por_pagina Número de registros por página (optional)
     * @param string $query Pesquisa textual (optional)
     * @param double $salario_minimo Salário mínimo oferecido pela vaga (optional)
     * @param double $salario_maximo Salário máximo oferecido pela vaga (optional)
     * @param string[] $tipo_vinculo Tipo de vínculo desejado (optional)
     * @param string[] $funcao Funcão da vaga (optional)
     * @param string[] $area Área de atuação (optional)
     * @param string[] $escolaridade Escolaridade (optional)
     * @param string[] $deficiencia Deficiência para vagas BNE (optional)
     * @param string[] $disponibilidade Disponibilidade requerida para a vaga (optional)
     * @param string[] $sigla_estado Nomes das cidades desejadas (optional)
     * @param string[] $nome_cidade Nomes das cidades desejadas (optional)
     * @param string[] $empresa Nomes das empresas anunciantes (optional)
     * @param \DateTime $data_inicio Limite inferior para a abertura da vaga (optional)
     * @param \DateTime $data_fim Limite superior para a abertura da vaga (optional)
     * @param int[] $id_origem Origem das vagas, empresas que possuem STC (optional)
     * @param bool $oportunidade Trazer oportunidade (vagas abertas a mais de 60 dias) (optional)
     * @param string $ordenacao Ordenação ex: \&quot;Dta_Abertura asc, Des_Funcao desc\&quot; (optional)
     * @param string[] $curso Cursos pesquisados com like (optional)
     * @param int[] $id_curso Pesquisa acertiva dos curso (optional)
     * @param int $curriculo Curriculo do BNE - para não trazer as vagas da empresa que o candidato bloqueou. (optional)
     * @param bool $oferece_curso Vagas de empresa que oferecem curso (optional)
     * @param int $funcao_agrupadora Vai retoranar as vagas com funções similares a pesquisada. (optional)
     * @param int $cidade_regiao Alem das vaga da cidade ira trazer as vagas da região metropolitana. (optional)
     * @param int $idf_filial Buscar vagas da filial (optional)
     * @param bool $confidencial Mostrar vagas Confidenciais (vaga de Empresas que optaram a não aparecer como anunciante na vaga) (optional)
     * @param bool $campanha Vaga de campanha (optional)
     * @param int[] $usuario_filial Quem Anunciou a vaga. (optional)
     * @param string[] $facet_field Campos para os quais a totalização deve ser retornada (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasGetWithHttpInfo($pagina = null, $registros_por_pagina = null, $query = null, $salario_minimo = null, $salario_maximo = null, $tipo_vinculo = null, $funcao = null, $area = null, $escolaridade = null, $deficiencia = null, $disponibilidade = null, $sigla_estado = null, $nome_cidade = null, $empresa = null, $data_inicio = null, $data_fim = null, $id_origem = null, $oportunidade = null, $ordenacao = null, $curso = null, $id_curso = null, $curriculo = null, $oferece_curso = null, $funcao_agrupadora = null, $cidade_regiao = null, $idf_filial = null, $confidencial = null, $campanha = null, $usuario_filial = null, $facet_field = null)
    {
        // parse inputs
        $resourcePath = "/v1.0/Vagas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($pagina !== null) {
            $queryParams['pagina'] = $this->apiClient->getSerializer()->toQueryValue($pagina);
        }
        // query params
        if ($registros_por_pagina !== null) {
            $queryParams['registrosPorPagina'] = $this->apiClient->getSerializer()->toQueryValue($registros_por_pagina);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // query params
        if ($salario_minimo !== null) {
            $queryParams['salarioMinimo'] = $this->apiClient->getSerializer()->toQueryValue($salario_minimo);
        }
        // query params
        if ($salario_maximo !== null) {
            $queryParams['salarioMaximo'] = $this->apiClient->getSerializer()->toQueryValue($salario_maximo);
        }
        // query params
        if (is_array($tipo_vinculo)) {
            $tipo_vinculo = $this->apiClient->getSerializer()->serializeCollection($tipo_vinculo, 'multi', true);
        }
        if ($tipo_vinculo !== null) {
            $queryParams['tipoVinculo'] = $this->apiClient->getSerializer()->toQueryValue($tipo_vinculo);
        }
        // query params
        if (is_array($funcao)) {
            $funcao = $this->apiClient->getSerializer()->serializeCollection($funcao, 'multi', true);
        }
        if ($funcao !== null) {
            $queryParams['funcao'] = $this->apiClient->getSerializer()->toQueryValue($funcao);
        }
        // query params
        if (is_array($area)) {
            $area = $this->apiClient->getSerializer()->serializeCollection($area, 'multi', true);
        }
        if ($area !== null) {
            $queryParams['area'] = $this->apiClient->getSerializer()->toQueryValue($area);
        }
        // query params
        if (is_array($escolaridade)) {
            $escolaridade = $this->apiClient->getSerializer()->serializeCollection($escolaridade, 'multi', true);
        }
        if ($escolaridade !== null) {
            $queryParams['escolaridade'] = $this->apiClient->getSerializer()->toQueryValue($escolaridade);
        }
        // query params
        if (is_array($deficiencia)) {
            $deficiencia = $this->apiClient->getSerializer()->serializeCollection($deficiencia, 'multi', true);
        }
        if ($deficiencia !== null) {
            $queryParams['deficiencia'] = $this->apiClient->getSerializer()->toQueryValue($deficiencia);
        }
        // query params
        if (is_array($disponibilidade)) {
            $disponibilidade = $this->apiClient->getSerializer()->serializeCollection($disponibilidade, 'multi', true);
        }
        if ($disponibilidade !== null) {
            $queryParams['disponibilidade'] = $this->apiClient->getSerializer()->toQueryValue($disponibilidade);
        }
        // query params
        if (is_array($sigla_estado)) {
            $sigla_estado = $this->apiClient->getSerializer()->serializeCollection($sigla_estado, 'multi', true);
        }
        if ($sigla_estado !== null) {
            $queryParams['siglaEstado'] = $this->apiClient->getSerializer()->toQueryValue($sigla_estado);
        }
        // query params
        if (is_array($nome_cidade)) {
            $nome_cidade = $this->apiClient->getSerializer()->serializeCollection($nome_cidade, 'multi', true);
        }
        if ($nome_cidade !== null) {
            $queryParams['nomeCidade'] = $this->apiClient->getSerializer()->toQueryValue($nome_cidade);
        }
        // query params
        if (is_array($empresa)) {
            $empresa = $this->apiClient->getSerializer()->serializeCollection($empresa, 'multi', true);
        }
        if ($empresa !== null) {
            $queryParams['empresa'] = $this->apiClient->getSerializer()->toQueryValue($empresa);
        }
        // query params
        if ($data_inicio !== null) {
            $queryParams['dataInicio'] = $this->apiClient->getSerializer()->toQueryValue($data_inicio);
        }
        // query params
        if ($data_fim !== null) {
            $queryParams['dataFim'] = $this->apiClient->getSerializer()->toQueryValue($data_fim);
        }
        // query params
        if (is_array($id_origem)) {
            $id_origem = $this->apiClient->getSerializer()->serializeCollection($id_origem, 'multi', true);
        }
        if ($id_origem !== null) {
            $queryParams['idOrigem'] = $this->apiClient->getSerializer()->toQueryValue($id_origem);
        }
        // query params
        if ($oportunidade !== null) {
            $queryParams['oportunidade'] = $this->apiClient->getSerializer()->toQueryValue($oportunidade);
        }
        // query params
        if ($ordenacao !== null) {
            $queryParams['ordenacao'] = $this->apiClient->getSerializer()->toQueryValue($ordenacao);
        }
        // query params
        if (is_array($curso)) {
            $curso = $this->apiClient->getSerializer()->serializeCollection($curso, 'multi', true);
        }
        if ($curso !== null) {
            $queryParams['curso'] = $this->apiClient->getSerializer()->toQueryValue($curso);
        }
        // query params
        if (is_array($id_curso)) {
            $id_curso = $this->apiClient->getSerializer()->serializeCollection($id_curso, 'multi', true);
        }
        if ($id_curso !== null) {
            $queryParams['idCurso'] = $this->apiClient->getSerializer()->toQueryValue($id_curso);
        }
        // query params
        if ($curriculo !== null) {
            $queryParams['curriculo'] = $this->apiClient->getSerializer()->toQueryValue($curriculo);
        }
        // query params
        if ($oferece_curso !== null) {
            $queryParams['ofereceCurso'] = $this->apiClient->getSerializer()->toQueryValue($oferece_curso);
        }
        // query params
        if ($funcao_agrupadora !== null) {
            $queryParams['funcaoAgrupadora'] = $this->apiClient->getSerializer()->toQueryValue($funcao_agrupadora);
        }
        // query params
        if ($cidade_regiao !== null) {
            $queryParams['cidadeRegiao'] = $this->apiClient->getSerializer()->toQueryValue($cidade_regiao);
        }
        // query params
        if ($idf_filial !== null) {
            $queryParams['idfFilial'] = $this->apiClient->getSerializer()->toQueryValue($idf_filial);
        }
        // query params
        if ($confidencial !== null) {
            $queryParams['confidencial'] = $this->apiClient->getSerializer()->toQueryValue($confidencial);
        }
        // query params
        if ($campanha !== null) {
            $queryParams['campanha'] = $this->apiClient->getSerializer()->toQueryValue($campanha);
        }
        // query params
        if (is_array($usuario_filial)) {
            $usuario_filial = $this->apiClient->getSerializer()->serializeCollection($usuario_filial, 'multi', true);
        }
        if ($usuario_filial !== null) {
            $queryParams['usuarioFilial'] = $this->apiClient->getSerializer()->toQueryValue($usuario_filial);
        }
        // query params
        if (is_array($facet_field)) {
            $facet_field = $this->apiClient->getSerializer()->serializeCollection($facet_field, 'multi', true);
        }
        if ($facet_field !== null) {
            $queryParams['facetField'] = $this->apiClient->getSerializer()->toQueryValue($facet_field);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2006',
                '/v1.0/Vagas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2006', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasGetBypaginaregistrosPorPaginasomenteMinhasVagastipoVinculostatusVaga
     *
     * Recupera a lista de vagas cadastradas para a api key informada
     *
     * @param int $pagina Página que deve ser retornada. A primeira página é \&quot;1\&quot;. (optional)
     * @param int $registros_por_pagina Número de registros a ser retornado por página. Default: 10 (optional)
     * @param bool $somente_minhas_vagas Se true, retorna somente as vagas que foram anunciadas pelo CPF presente na ApiKey. Se false, retorna as vagas cadastradas para a empresa informada no APIKey. (optional)
     * @param string $tipo_vinculo Tipo de vínculo utilizado para filtrar as vagas. (optional)
     * @param string $status_vaga Status da vaga. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function vagasGetBypaginaregistrosPorPaginasomenteMinhasVagastipoVinculostatusVaga($pagina = null, $registros_por_pagina = null, $somente_minhas_vagas = null, $tipo_vinculo = null, $status_vaga = null)
    {
        list($response) = $this->vagasGetBypaginaregistrosPorPaginasomenteMinhasVagastipoVinculostatusVagaWithHttpInfo($pagina, $registros_por_pagina, $somente_minhas_vagas, $tipo_vinculo, $status_vaga);
        return $response;
    }

    /**
     * Operation vagasGetBypaginaregistrosPorPaginasomenteMinhasVagastipoVinculostatusVagaWithHttpInfo
     *
     * Recupera a lista de vagas cadastradas para a api key informada
     *
     * @param int $pagina Página que deve ser retornada. A primeira página é \&quot;1\&quot;. (optional)
     * @param int $registros_por_pagina Número de registros a ser retornado por página. Default: 10 (optional)
     * @param bool $somente_minhas_vagas Se true, retorna somente as vagas que foram anunciadas pelo CPF presente na ApiKey. Se false, retorna as vagas cadastradas para a empresa informada no APIKey. (optional)
     * @param string $tipo_vinculo Tipo de vínculo utilizado para filtrar as vagas. (optional)
     * @param string $status_vaga Status da vaga. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasGetBypaginaregistrosPorPaginasomenteMinhasVagastipoVinculostatusVagaWithHttpInfo($pagina = null, $registros_por_pagina = null, $somente_minhas_vagas = null, $tipo_vinculo = null, $status_vaga = null)
    {
        // parse inputs
        $resourcePath = "/v1.0/Vagas/Empresa";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($pagina !== null) {
            $queryParams['pagina'] = $this->apiClient->getSerializer()->toQueryValue($pagina);
        }
        // query params
        if ($registros_por_pagina !== null) {
            $queryParams['registrosPorPagina'] = $this->apiClient->getSerializer()->toQueryValue($registros_por_pagina);
        }
        // query params
        if ($somente_minhas_vagas !== null) {
            $queryParams['somenteMinhasVagas'] = $this->apiClient->getSerializer()->toQueryValue($somente_minhas_vagas);
        }
        // query params
        if ($tipo_vinculo !== null) {
            $queryParams['tipoVinculo'] = $this->apiClient->getSerializer()->toQueryValue($tipo_vinculo);
        }
        // query params
        if ($status_vaga !== null) {
            $queryParams['statusVaga'] = $this->apiClient->getSerializer()->toQueryValue($status_vaga);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2005',
                '/v1.0/Vagas/Empresa'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2005', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasGetEmpresaByid
     *
     * Recupera uma vaga baseada em seu ID
     *
     * @param int $id Id da Vaga a ser recuperada (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2005Registros
     */
    public function vagasGetEmpresaByid($id)
    {
        list($response) = $this->vagasGetEmpresaByidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation vagasGetEmpresaByidWithHttpInfo
     *
     * Recupera uma vaga baseada em seu ID
     *
     * @param int $id Id da Vaga a ser recuperada (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2005Registros, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasGetEmpresaByidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling vagasGetEmpresaByid');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/Empresa/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2005Registros',
                '/v1.0/Vagas/Empresa/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2005Registros', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2005Registros', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasObterCandidatosBycodigoVagapaginareturnType
     *
     * Lista os candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param int $pagina Número da página que deseja acessar. O valor padrão é 1 (optional)
     * @param string $return_type Formato desejado para os currículos candidatos. O valor padrão é &#39;Minicurriculo&#39; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse20012
     */
    public function vagasObterCandidatosBycodigoVagapaginareturnType($codigo_vaga, $pagina = null, $return_type = null)
    {
        list($response) = $this->vagasObterCandidatosBycodigoVagapaginareturnTypeWithHttpInfo($codigo_vaga, $pagina, $return_type);
        return $response;
    }

    /**
     * Operation vagasObterCandidatosBycodigoVagapaginareturnTypeWithHttpInfo
     *
     * Lista os candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param int $pagina Número da página que deseja acessar. O valor padrão é 1 (optional)
     * @param string $return_type Formato desejado para os currículos candidatos. O valor padrão é &#39;Minicurriculo&#39; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasObterCandidatosBycodigoVagapaginareturnTypeWithHttpInfo($codigo_vaga, $pagina = null, $return_type = null)
    {
        // verify the required parameter 'codigo_vaga' is set
        if ($codigo_vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $codigo_vaga when calling vagasObterCandidatosBycodigoVagapaginareturnType');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/ObterCandidatos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($codigo_vaga !== null) {
            $queryParams['codigoVaga'] = $this->apiClient->getSerializer()->toQueryValue($codigo_vaga);
        }
        // query params
        if ($pagina !== null) {
            $queryParams['pagina'] = $this->apiClient->getSerializer()->toQueryValue($pagina);
        }
        // query params
        if ($return_type !== null) {
            $queryParams['returnType'] = $this->apiClient->getSerializer()->toQueryValue($return_type);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20012',
                '/v1.0/Vagas/ObterCandidatos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20012', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasObterCurriculosCandidatosBycodigoVagapagina
     *
     * Lista os currículos completos dos candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param int $pagina Número da página que deseja acessar. O valor padrão é 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse20011
     */
    public function vagasObterCurriculosCandidatosBycodigoVagapagina($codigo_vaga, $pagina = null)
    {
        list($response) = $this->vagasObterCurriculosCandidatosBycodigoVagapaginaWithHttpInfo($codigo_vaga, $pagina);
        return $response;
    }

    /**
     * Operation vagasObterCurriculosCandidatosBycodigoVagapaginaWithHttpInfo
     *
     * Lista os currículos completos dos candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param int $pagina Número da página que deseja acessar. O valor padrão é 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasObterCurriculosCandidatosBycodigoVagapaginaWithHttpInfo($codigo_vaga, $pagina = null)
    {
        // verify the required parameter 'codigo_vaga' is set
        if ($codigo_vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $codigo_vaga when calling vagasObterCurriculosCandidatosBycodigoVagapagina');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/ObterCurriculosCandidatos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($codigo_vaga !== null) {
            $queryParams['codigoVaga'] = $this->apiClient->getSerializer()->toQueryValue($codigo_vaga);
        }
        // query params
        if ($pagina !== null) {
            $queryParams['pagina'] = $this->apiClient->getSerializer()->toQueryValue($pagina);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20011',
                '/v1.0/Vagas/ObterCurriculosCandidatos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20011', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20011', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasObterMiniCurriculosCandidatosBycodigoVagapagina
     *
     * Lista os minicurrículos dos candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param int $pagina Número da página que deseja acessar. O valor padrão é 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse20010
     */
    public function vagasObterMiniCurriculosCandidatosBycodigoVagapagina($codigo_vaga, $pagina = null)
    {
        list($response) = $this->vagasObterMiniCurriculosCandidatosBycodigoVagapaginaWithHttpInfo($codigo_vaga, $pagina);
        return $response;
    }

    /**
     * Operation vagasObterMiniCurriculosCandidatosBycodigoVagapaginaWithHttpInfo
     *
     * Lista os minicurrículos dos candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param int $pagina Número da página que deseja acessar. O valor padrão é 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasObterMiniCurriculosCandidatosBycodigoVagapaginaWithHttpInfo($codigo_vaga, $pagina = null)
    {
        // verify the required parameter 'codigo_vaga' is set
        if ($codigo_vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $codigo_vaga when calling vagasObterMiniCurriculosCandidatosBycodigoVagapagina');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/ObterMiniCurriculosCandidatos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($codigo_vaga !== null) {
            $queryParams['codigoVaga'] = $this->apiClient->getSerializer()->toQueryValue($codigo_vaga);
        }
        // query params
        if ($pagina !== null) {
            $queryParams['pagina'] = $this->apiClient->getSerializer()->toQueryValue($pagina);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20010',
                '/v1.0/Vagas/ObterMiniCurriculosCandidatos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20010', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20010', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasObterUltimosCandidatosBycodigoVagadatareturnType
     *
     * Lista os candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param \DateTime $data Data e hora a partir de qual as candidaturas devem ser recuperadas. (required)
     * @param string $return_type Formato desejado para os currículos candidatos. O valor padrão é &#39;Minicurriculo&#39; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse20012Curriculos[]
     */
    public function vagasObterUltimosCandidatosBycodigoVagadatareturnType($codigo_vaga, $data, $return_type = null)
    {
        list($response) = $this->vagasObterUltimosCandidatosBycodigoVagadatareturnTypeWithHttpInfo($codigo_vaga, $data, $return_type);
        return $response;
    }

    /**
     * Operation vagasObterUltimosCandidatosBycodigoVagadatareturnTypeWithHttpInfo
     *
     * Lista os candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param \DateTime $data Data e hora a partir de qual as candidaturas devem ser recuperadas. (required)
     * @param string $return_type Formato desejado para os currículos candidatos. O valor padrão é &#39;Minicurriculo&#39; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse20012Curriculos[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasObterUltimosCandidatosBycodigoVagadatareturnTypeWithHttpInfo($codigo_vaga, $data, $return_type = null)
    {
        // verify the required parameter 'codigo_vaga' is set
        if ($codigo_vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $codigo_vaga when calling vagasObterUltimosCandidatosBycodigoVagadatareturnType');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling vagasObterUltimosCandidatosBycodigoVagadatareturnType');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/ObterUltimosCandidatos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($codigo_vaga !== null) {
            $queryParams['codigoVaga'] = $this->apiClient->getSerializer()->toQueryValue($codigo_vaga);
        }
        // query params
        if ($data !== null) {
            $queryParams['data'] = $this->apiClient->getSerializer()->toQueryValue($data);
        }
        // query params
        if ($return_type !== null) {
            $queryParams['returnType'] = $this->apiClient->getSerializer()->toQueryValue($return_type);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20012Curriculos[]',
                '/v1.0/Vagas/ObterUltimosCandidatos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20012Curriculos[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20012Curriculos[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasObterUltimosCurriculosCandidatosBycodigoVagadata
     *
     * Lista os currículos candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param \DateTime $data Data e hora a partir de qual as candidaturas devem ser recuperadas. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2002[]
     */
    public function vagasObterUltimosCurriculosCandidatosBycodigoVagadata($codigo_vaga, $data)
    {
        list($response) = $this->vagasObterUltimosCurriculosCandidatosBycodigoVagadataWithHttpInfo($codigo_vaga, $data);
        return $response;
    }

    /**
     * Operation vagasObterUltimosCurriculosCandidatosBycodigoVagadataWithHttpInfo
     *
     * Lista os currículos candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param \DateTime $data Data e hora a partir de qual as candidaturas devem ser recuperadas. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2002[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasObterUltimosCurriculosCandidatosBycodigoVagadataWithHttpInfo($codigo_vaga, $data)
    {
        // verify the required parameter 'codigo_vaga' is set
        if ($codigo_vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $codigo_vaga when calling vagasObterUltimosCurriculosCandidatosBycodigoVagadata');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling vagasObterUltimosCurriculosCandidatosBycodigoVagadata');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/ObterUltimosCurriculosCandidatos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($codigo_vaga !== null) {
            $queryParams['codigoVaga'] = $this->apiClient->getSerializer()->toQueryValue($codigo_vaga);
        }
        // query params
        if ($data !== null) {
            $queryParams['data'] = $this->apiClient->getSerializer()->toQueryValue($data);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002[]',
                '/v1.0/Vagas/ObterUltimosCurriculosCandidatos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasObterUltimosMiniCurriculosCandidatosBycodigoVagadata
     *
     * Lista os minicurriculos candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param \DateTime $data Data e hora a partir de qual as candidaturas devem ser recuperadas. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2003Curriculos[]
     */
    public function vagasObterUltimosMiniCurriculosCandidatosBycodigoVagadata($codigo_vaga, $data)
    {
        list($response) = $this->vagasObterUltimosMiniCurriculosCandidatosBycodigoVagadataWithHttpInfo($codigo_vaga, $data);
        return $response;
    }

    /**
     * Operation vagasObterUltimosMiniCurriculosCandidatosBycodigoVagadataWithHttpInfo
     *
     * Lista os minicurriculos candidatos de uma determinada vaga.
     *
     * @param int $codigo_vaga Código da vaga. (required)
     * @param \DateTime $data Data e hora a partir de qual as candidaturas devem ser recuperadas. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2003Curriculos[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasObterUltimosMiniCurriculosCandidatosBycodigoVagadataWithHttpInfo($codigo_vaga, $data)
    {
        // verify the required parameter 'codigo_vaga' is set
        if ($codigo_vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $codigo_vaga when calling vagasObterUltimosMiniCurriculosCandidatosBycodigoVagadata');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling vagasObterUltimosMiniCurriculosCandidatosBycodigoVagadata');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/ObterUltimosMiniCurriculosCandidatos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($codigo_vaga !== null) {
            $queryParams['codigoVaga'] = $this->apiClient->getSerializer()->toQueryValue($codigo_vaga);
        }
        // query params
        if ($data !== null) {
            $queryParams['data'] = $this->apiClient->getSerializer()->toQueryValue($data);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003Curriculos[]',
                '/v1.0/Vagas/ObterUltimosMiniCurriculosCandidatos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003Curriculos[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003Curriculos[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasSalvarByidVagavaga
     *
     * Atualiza uma vaga já cadastrada.
     *
     * @param int $id_vaga Identificador da vaga a ser atualizada (required)
     * @param \Swagger\Client\Model\Vaga1 $vaga Vaga que será publicada na filial do usuário. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2009
     */
    public function vagasSalvarByidVagavaga($id_vaga, $vaga)
    {
        list($response) = $this->vagasSalvarByidVagavagaWithHttpInfo($id_vaga, $vaga);
        return $response;
    }

    /**
     * Operation vagasSalvarByidVagavagaWithHttpInfo
     *
     * Atualiza uma vaga já cadastrada.
     *
     * @param int $id_vaga Identificador da vaga a ser atualizada (required)
     * @param \Swagger\Client\Model\Vaga1 $vaga Vaga que será publicada na filial do usuário. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasSalvarByidVagavagaWithHttpInfo($id_vaga, $vaga)
    {
        // verify the required parameter 'id_vaga' is set
        if ($id_vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_vaga when calling vagasSalvarByidVagavaga');
        }
        // verify the required parameter 'vaga' is set
        if ($vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vaga when calling vagasSalvarByidVagavaga');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/Salvar/{idVaga}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_vaga !== null) {
            $resourcePath = str_replace(
                "{" . "idVaga" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_vaga),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($vaga)) {
            $_tempBody = $vaga;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2009',
                '/v1.0/Vagas/Salvar/{idVaga}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2009', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2009', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation vagasSalvarByvaga
     *
     * Cadastra uma nova vaga.
     *
     * @param \Swagger\Client\Model\Vaga $vaga Vaga que será publicada na filial do usuário. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2009
     */
    public function vagasSalvarByvaga($vaga)
    {
        list($response) = $this->vagasSalvarByvagaWithHttpInfo($vaga);
        return $response;
    }

    /**
     * Operation vagasSalvarByvagaWithHttpInfo
     *
     * Cadastra uma nova vaga.
     *
     * @param \Swagger\Client\Model\Vaga $vaga Vaga que será publicada na filial do usuário. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function vagasSalvarByvagaWithHttpInfo($vaga)
    {
        // verify the required parameter 'vaga' is set
        if ($vaga === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vaga when calling vagasSalvarByvaga');
        }
        // parse inputs
        $resourcePath = "/v1.0/Vagas/Salvar";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($vaga)) {
            $_tempBody = $vaga;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2009',
                '/v1.0/Vagas/Salvar'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2009', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2009', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
