<?php
/**
 * InlineResponse2002Formacoes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InlineResponse2002Formacoes Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002Formacoes implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_formacoes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'descricao_formacao' => 'string',
        'descricao_curso' => 'string',
        'nome_fonte' => 'string',
        'sigla_fonte' => 'string',
        'situacao_formacao' => 'string',
        'ano_conclusao' => 'int',
        'periodo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'descricao_formacao' => null,
        'descricao_curso' => null,
        'nome_fonte' => null,
        'sigla_fonte' => null,
        'situacao_formacao' => null,
        'ano_conclusao' => 'int32',
        'periodo' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'descricao_formacao' => 'DescricaoFormacao',
        'descricao_curso' => 'DescricaoCurso',
        'nome_fonte' => 'NomeFonte',
        'sigla_fonte' => 'SiglaFonte',
        'situacao_formacao' => 'SituacaoFormacao',
        'ano_conclusao' => 'AnoConclusao',
        'periodo' => 'Periodo'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'descricao_formacao' => 'setDescricaoFormacao',
        'descricao_curso' => 'setDescricaoCurso',
        'nome_fonte' => 'setNomeFonte',
        'sigla_fonte' => 'setSiglaFonte',
        'situacao_formacao' => 'setSituacaoFormacao',
        'ano_conclusao' => 'setAnoConclusao',
        'periodo' => 'setPeriodo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'descricao_formacao' => 'getDescricaoFormacao',
        'descricao_curso' => 'getDescricaoCurso',
        'nome_fonte' => 'getNomeFonte',
        'sigla_fonte' => 'getSiglaFonte',
        'situacao_formacao' => 'getSituacaoFormacao',
        'ano_conclusao' => 'getAnoConclusao',
        'periodo' => 'getPeriodo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['descricao_formacao'] = isset($data['descricao_formacao']) ? $data['descricao_formacao'] : null;
        $this->container['descricao_curso'] = isset($data['descricao_curso']) ? $data['descricao_curso'] : null;
        $this->container['nome_fonte'] = isset($data['nome_fonte']) ? $data['nome_fonte'] : null;
        $this->container['sigla_fonte'] = isset($data['sigla_fonte']) ? $data['sigla_fonte'] : null;
        $this->container['situacao_formacao'] = isset($data['situacao_formacao']) ? $data['situacao_formacao'] : null;
        $this->container['ano_conclusao'] = isset($data['ano_conclusao']) ? $data['ano_conclusao'] : null;
        $this->container['periodo'] = isset($data['periodo']) ? $data['periodo'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets descricao_formacao
     * @return string
     */
    public function getDescricaoFormacao()
    {
        return $this->container['descricao_formacao'];
    }

    /**
     * Sets descricao_formacao
     * @param string $descricao_formacao
     * @return $this
     */
    public function setDescricaoFormacao($descricao_formacao)
    {
        $this->container['descricao_formacao'] = $descricao_formacao;

        return $this;
    }

    /**
     * Gets descricao_curso
     * @return string
     */
    public function getDescricaoCurso()
    {
        return $this->container['descricao_curso'];
    }

    /**
     * Sets descricao_curso
     * @param string $descricao_curso
     * @return $this
     */
    public function setDescricaoCurso($descricao_curso)
    {
        $this->container['descricao_curso'] = $descricao_curso;

        return $this;
    }

    /**
     * Gets nome_fonte
     * @return string
     */
    public function getNomeFonte()
    {
        return $this->container['nome_fonte'];
    }

    /**
     * Sets nome_fonte
     * @param string $nome_fonte
     * @return $this
     */
    public function setNomeFonte($nome_fonte)
    {
        $this->container['nome_fonte'] = $nome_fonte;

        return $this;
    }

    /**
     * Gets sigla_fonte
     * @return string
     */
    public function getSiglaFonte()
    {
        return $this->container['sigla_fonte'];
    }

    /**
     * Sets sigla_fonte
     * @param string $sigla_fonte
     * @return $this
     */
    public function setSiglaFonte($sigla_fonte)
    {
        $this->container['sigla_fonte'] = $sigla_fonte;

        return $this;
    }

    /**
     * Gets situacao_formacao
     * @return string
     */
    public function getSituacaoFormacao()
    {
        return $this->container['situacao_formacao'];
    }

    /**
     * Sets situacao_formacao
     * @param string $situacao_formacao
     * @return $this
     */
    public function setSituacaoFormacao($situacao_formacao)
    {
        $this->container['situacao_formacao'] = $situacao_formacao;

        return $this;
    }

    /**
     * Gets ano_conclusao
     * @return int
     */
    public function getAnoConclusao()
    {
        return $this->container['ano_conclusao'];
    }

    /**
     * Sets ano_conclusao
     * @param int $ano_conclusao
     * @return $this
     */
    public function setAnoConclusao($ano_conclusao)
    {
        $this->container['ano_conclusao'] = $ano_conclusao;

        return $this;
    }

    /**
     * Gets periodo
     * @return string
     */
    public function getPeriodo()
    {
        return $this->container['periodo'];
    }

    /**
     * Sets periodo
     * @param string $periodo
     * @return $this
     */
    public function setPeriodo($periodo)
    {
        $this->container['periodo'] = $periodo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


