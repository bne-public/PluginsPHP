<?php
/**
 * PerguntaEmpresa
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PerguntaEmpresa Class Doc Comment
 *
 * @category    Class
 * @description Representa uma pergunta feita para candidatos que se inscrevem na vaga.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PerguntaEmpresa implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PerguntaEmpresa';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'resposta' => 'string',
        'id_pergunta' => 'int',
        'texto' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'resposta' => null,
        'id_pergunta' => 'int32',
        'texto' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'resposta' => 'Resposta',
        'id_pergunta' => 'IdPergunta',
        'texto' => 'Texto'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'resposta' => 'setResposta',
        'id_pergunta' => 'setIdPergunta',
        'texto' => 'setTexto'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'resposta' => 'getResposta',
        'id_pergunta' => 'getIdPergunta',
        'texto' => 'getTexto'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resposta'] = isset($data['resposta']) ? $data['resposta'] : null;
        $this->container['id_pergunta'] = isset($data['id_pergunta']) ? $data['id_pergunta'] : null;
        $this->container['texto'] = isset($data['texto']) ? $data['texto'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets resposta
     * @return string
     */
    public function getResposta()
    {
        return $this->container['resposta'];
    }

    /**
     * Sets resposta
     * @param string $resposta (Obrigatório) Resposta para questão que pode ser \"Sim\" ou \"Não\".
     * @return $this
     */
    public function setResposta($resposta)
    {
        $this->container['resposta'] = $resposta;

        return $this;
    }

    /**
     * Gets id_pergunta
     * @return int
     */
    public function getIdPergunta()
    {
        return $this->container['id_pergunta'];
    }

    /**
     * Sets id_pergunta
     * @param int $id_pergunta Identificador da pergunta.
     * @return $this
     */
    public function setIdPergunta($id_pergunta)
    {
        $this->container['id_pergunta'] = $id_pergunta;

        return $this;
    }

    /**
     * Gets texto
     * @return string
     */
    public function getTexto()
    {
        return $this->container['texto'];
    }

    /**
     * Sets texto
     * @param string $texto Texto da pergunta.
     * @return $this
     */
    public function setTexto($texto)
    {
        $this->container['texto'] = $texto;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


